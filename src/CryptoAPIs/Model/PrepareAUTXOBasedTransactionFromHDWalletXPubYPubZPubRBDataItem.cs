/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
    /// </summary>
    [DataContract(Name = "PrepareAUTXO_BasedTransactionFromHDWalletXPubYPubZPubRB_data_item")]
    public partial class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem : IEquatable<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem>, IValidatableObject
    {
        /// <summary>
        /// Representation of the transaction&#39;s strategy type
        /// </summary>
        /// <value>Representation of the transaction&#39;s strategy type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrepareStrategyEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum MinimizeDust for value: minimize-dust
            /// </summary>
            [EnumMember(Value = "minimize-dust")]
            MinimizeDust = 2,

            /// <summary>
            /// Enum OptimizeSize for value: optimize-size
            /// </summary>
            [EnumMember(Value = "optimize-size")]
            OptimizeSize = 3

        }


        /// <summary>
        /// Representation of the transaction&#39;s strategy type
        /// </summary>
        /// <value>Representation of the transaction&#39;s strategy type</value>
        [DataMember(Name = "prepareStrategy", EmitDefaultValue = false)]
        public PrepareStrategyEnum? PrepareStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem" /> class.
        /// </summary>
        /// <param name="additionalData">Representation of the additional data..</param>
        /// <param name="fee">fee (required).</param>
        /// <param name="locktime">Represents the time at which a particular transaction can be added to the blockchain..</param>
        /// <param name="prepareStrategy">Representation of the transaction&#39;s strategy type.</param>
        /// <param name="recipients">Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list. (required).</param>
        /// <param name="replaceable">Representation of whether the transaction is replaceable.</param>
        /// <param name="xpub">Defines the account extended publicly known key which is used to derive all child public keys. (required).</param>
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem(string additionalData = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee), int locktime = default(int), PrepareStrategyEnum? prepareStrategy = default(PrepareStrategyEnum?), List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> recipients = default(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner>), bool replaceable = default(bool), string xpub = default(string))
        {
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Fee = fee;
            // to ensure "recipients" is required (not null)
            if (recipients == null)
            {
                throw new ArgumentNullException("recipients is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Recipients = recipients;
            // to ensure "xpub" is required (not null)
            if (xpub == null)
            {
                throw new ArgumentNullException("xpub is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Xpub = xpub;
            this.AdditionalData = additionalData;
            this.Locktime = locktime;
            this.PrepareStrategy = prepareStrategy;
            this.Replaceable = replaceable;
        }

        /// <summary>
        /// Representation of the additional data.
        /// </summary>
        /// <value>Representation of the additional data.</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee Fee { get; set; }

        /// <summary>
        /// Represents the time at which a particular transaction can be added to the blockchain.
        /// </summary>
        /// <value>Represents the time at which a particular transaction can be added to the blockchain.</value>
        [DataMember(Name = "locktime", EmitDefaultValue = false)]
        public int Locktime { get; set; }

        /// <summary>
        /// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
        /// </summary>
        /// <value>Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.</value>
        [DataMember(Name = "recipients", IsRequired = true, EmitDefaultValue = false)]
        public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> Recipients { get; set; }

        /// <summary>
        /// Representation of whether the transaction is replaceable
        /// </summary>
        /// <value>Representation of whether the transaction is replaceable</value>
        [DataMember(Name = "replaceable", EmitDefaultValue = true)]
        public bool Replaceable { get; set; }

        /// <summary>
        /// Defines the account extended publicly known key which is used to derive all child public keys.
        /// </summary>
        /// <value>Defines the account extended publicly known key which is used to derive all child public keys.</value>
        [DataMember(Name = "xpub", IsRequired = true, EmitDefaultValue = false)]
        public string Xpub { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Locktime: ").Append(Locktime).Append("\n");
            sb.Append("  PrepareStrategy: ").Append(PrepareStrategy).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Replaceable: ").Append(Replaceable).Append("\n");
            sb.Append("  Xpub: ").Append(Xpub).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem);
        }

        /// <summary>
        /// Returns true if PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Locktime == input.Locktime ||
                    this.Locktime.Equals(input.Locktime)
                ) && 
                (
                    this.PrepareStrategy == input.PrepareStrategy ||
                    this.PrepareStrategy.Equals(input.PrepareStrategy)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Replaceable == input.Replaceable ||
                    this.Replaceable.Equals(input.Replaceable)
                ) && 
                (
                    this.Xpub == input.Xpub ||
                    (this.Xpub != null &&
                    this.Xpub.Equals(input.Xpub))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Locktime.GetHashCode();
                hashCode = (hashCode * 59) + this.PrepareStrategy.GetHashCode();
                if (this.Recipients != null)
                {
                    hashCode = (hashCode * 59) + this.Recipients.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Replaceable.GetHashCode();
                if (this.Xpub != null)
                {
                    hashCode = (hashCode * 59) + this.Xpub.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
