/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Defines the logo of the asset.
    /// </summary>
    [DataContract(Name = "ListAssetsDetailsRI_assetLogo")]
    public partial class ListAssetsDetailsRIAssetLogo : IEquatable<ListAssetsDetailsRIAssetLogo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsRIAssetLogo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListAssetsDetailsRIAssetLogo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsRIAssetLogo" /> class.
        /// </summary>
        /// <param name="encoding">Defines the encoding of the image data which is usually base64. (required).</param>
        /// <param name="imageData">Defines the encoded image data as a string. (required).</param>
        /// <param name="mimeType">Defines the image type of the logo - jpg, png, svg, etc. (required).</param>
        public ListAssetsDetailsRIAssetLogo(string encoding = default(string), string imageData = default(string), string mimeType = default(string))
        {
            // to ensure "encoding" is required (not null)
            this.Encoding = encoding ?? throw new ArgumentNullException("encoding is a required property for ListAssetsDetailsRIAssetLogo and cannot be null");
            // to ensure "imageData" is required (not null)
            this.ImageData = imageData ?? throw new ArgumentNullException("imageData is a required property for ListAssetsDetailsRIAssetLogo and cannot be null");
            // to ensure "mimeType" is required (not null)
            this.MimeType = mimeType ?? throw new ArgumentNullException("mimeType is a required property for ListAssetsDetailsRIAssetLogo and cannot be null");
        }

        /// <summary>
        /// Defines the encoding of the image data which is usually base64.
        /// </summary>
        /// <value>Defines the encoding of the image data which is usually base64.</value>
        [DataMember(Name = "encoding", IsRequired = true, EmitDefaultValue = false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Defines the encoded image data as a string.
        /// </summary>
        /// <value>Defines the encoded image data as a string.</value>
        [DataMember(Name = "imageData", IsRequired = true, EmitDefaultValue = false)]
        public string ImageData { get; set; }

        /// <summary>
        /// Defines the image type of the logo - jpg, png, svg, etc.
        /// </summary>
        /// <value>Defines the image type of the logo - jpg, png, svg, etc.</value>
        [DataMember(Name = "mimeType", IsRequired = true, EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListAssetsDetailsRIAssetLogo {\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  ImageData: ").Append(ImageData).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListAssetsDetailsRIAssetLogo);
        }

        /// <summary>
        /// Returns true if ListAssetsDetailsRIAssetLogo instances are equal
        /// </summary>
        /// <param name="input">Instance of ListAssetsDetailsRIAssetLogo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListAssetsDetailsRIAssetLogo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.ImageData == input.ImageData ||
                    (this.ImageData != null &&
                    this.ImageData.Equals(input.ImageData))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                if (this.ImageData != null)
                    hashCode = hashCode * 59 + this.ImageData.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
