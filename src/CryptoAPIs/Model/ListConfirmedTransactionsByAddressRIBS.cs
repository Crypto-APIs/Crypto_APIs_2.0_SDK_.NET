/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListConfirmedTransactionsByAddressRIBS
    /// </summary>
    [JsonConverter(typeof(ListConfirmedTransactionsByAddressRIBSJsonConverter))]
    [DataContract(Name = "ListConfirmedTransactionsByAddressRIBS")]
    public partial class ListConfirmedTransactionsByAddressRIBS : AbstractOpenAPISchema, IEquatable<ListConfirmedTransactionsByAddressRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSB.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSBC.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSBSC.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSD.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSD2.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSE.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSEC.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSL.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListConfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListConfirmedTransactionsByAddressRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListConfirmedTransactionsByAddressRIBSZ.</param>
        public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListConfirmedTransactionsByAddressRIBSZ))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSB`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSB</returns>
        public ListConfirmedTransactionsByAddressRIBSB GetListConfirmedTransactionsByAddressRIBSB()
        {
            return (ListConfirmedTransactionsByAddressRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSBC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSBC</returns>
        public ListConfirmedTransactionsByAddressRIBSBC GetListConfirmedTransactionsByAddressRIBSBC()
        {
            return (ListConfirmedTransactionsByAddressRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSBSC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSBSC</returns>
        public ListConfirmedTransactionsByAddressRIBSBSC GetListConfirmedTransactionsByAddressRIBSBSC()
        {
            return (ListConfirmedTransactionsByAddressRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSD`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSD</returns>
        public ListConfirmedTransactionsByAddressRIBSD GetListConfirmedTransactionsByAddressRIBSD()
        {
            return (ListConfirmedTransactionsByAddressRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSD2`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSD2</returns>
        public ListConfirmedTransactionsByAddressRIBSD2 GetListConfirmedTransactionsByAddressRIBSD2()
        {
            return (ListConfirmedTransactionsByAddressRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSE`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSE</returns>
        public ListConfirmedTransactionsByAddressRIBSE GetListConfirmedTransactionsByAddressRIBSE()
        {
            return (ListConfirmedTransactionsByAddressRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSEC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSEC</returns>
        public ListConfirmedTransactionsByAddressRIBSEC GetListConfirmedTransactionsByAddressRIBSEC()
        {
            return (ListConfirmedTransactionsByAddressRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSL`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSL</returns>
        public ListConfirmedTransactionsByAddressRIBSL GetListConfirmedTransactionsByAddressRIBSL()
        {
            return (ListConfirmedTransactionsByAddressRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListConfirmedTransactionsByAddressRIBSZ`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBSZ</returns>
        public ListConfirmedTransactionsByAddressRIBSZ GetListConfirmedTransactionsByAddressRIBSZ()
        {
            return (ListConfirmedTransactionsByAddressRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListConfirmedTransactionsByAddressRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ListConfirmedTransactionsByAddressRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ListConfirmedTransactionsByAddressRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ListConfirmedTransactionsByAddressRIBS</returns>
        public static ListConfirmedTransactionsByAddressRIBS FromJson(string jsonString)
        {
            ListConfirmedTransactionsByAddressRIBS newListConfirmedTransactionsByAddressRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newListConfirmedTransactionsByAddressRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSB>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSB>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSBC>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSBC>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSBSC>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSBSC>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSD>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSD>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSD2>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSD2>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSE>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSE>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSEC>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSEC>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSL>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSL>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListConfirmedTransactionsByAddressRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSZ>(jsonString, ListConfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListConfirmedTransactionsByAddressRIBS = new ListConfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListConfirmedTransactionsByAddressRIBSZ>(jsonString, ListConfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListConfirmedTransactionsByAddressRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListConfirmedTransactionsByAddressRIBSZ: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newListConfirmedTransactionsByAddressRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListConfirmedTransactionsByAddressRIBS);
        }

        /// <summary>
        /// Returns true if ListConfirmedTransactionsByAddressRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of ListConfirmedTransactionsByAddressRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListConfirmedTransactionsByAddressRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ListConfirmedTransactionsByAddressRIBS
    /// </summary>
    public class ListConfirmedTransactionsByAddressRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ListConfirmedTransactionsByAddressRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ListConfirmedTransactionsByAddressRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
