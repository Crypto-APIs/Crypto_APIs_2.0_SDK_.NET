/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// DecodeXAddressRI
    /// </summary>
    [DataContract(Name = "DecodeX-AddressRI")]
    public partial class DecodeXAddressRI : IEquatable<DecodeXAddressRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeXAddressRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecodeXAddressRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeXAddressRI" /> class.
        /// </summary>
        /// <param name="addressTag">Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address. (required).</param>
        /// <param name="classicAddress">Represents the public address, which is a compressed and shortened form of a public key. (required).</param>
        public DecodeXAddressRI(int addressTag = default(int), string classicAddress = default(string))
        {
            this.AddressTag = addressTag;
            // to ensure "classicAddress" is required (not null)
            if (classicAddress == null)
            {
                throw new ArgumentNullException("classicAddress is a required property for DecodeXAddressRI and cannot be null");
            }
            this.ClassicAddress = classicAddress;
        }

        /// <summary>
        /// Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address.
        /// </summary>
        /// <value>Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address.</value>
        [DataMember(Name = "addressTag", IsRequired = true, EmitDefaultValue = false)]
        public int AddressTag { get; set; }

        /// <summary>
        /// Represents the public address, which is a compressed and shortened form of a public key.
        /// </summary>
        /// <value>Represents the public address, which is a compressed and shortened form of a public key.</value>
        [DataMember(Name = "classicAddress", IsRequired = true, EmitDefaultValue = false)]
        public string ClassicAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecodeXAddressRI {\n");
            sb.Append("  AddressTag: ").Append(AddressTag).Append("\n");
            sb.Append("  ClassicAddress: ").Append(ClassicAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecodeXAddressRI);
        }

        /// <summary>
        /// Returns true if DecodeXAddressRI instances are equal
        /// </summary>
        /// <param name="input">Instance of DecodeXAddressRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecodeXAddressRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressTag == input.AddressTag ||
                    this.AddressTag.Equals(input.AddressTag)
                ) && 
                (
                    this.ClassicAddress == input.ClassicAddress ||
                    (this.ClassicAddress != null &&
                    this.ClassicAddress.Equals(input.ClassicAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AddressTag.GetHashCode();
                if (this.ClassicAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ClassicAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
