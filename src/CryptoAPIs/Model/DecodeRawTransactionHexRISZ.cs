/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Zcash
    /// </summary>
    [DataContract(Name = "DecodeRawTransactionHexRISZ")]
    public partial class DecodeRawTransactionHexRISZ : IEquatable<DecodeRawTransactionHexRISZ>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRISZ" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecodeRawTransactionHexRISZ() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRISZ" /> class.
        /// </summary>
        /// <param name="expiryHeight">Represents a block height after which the transaction will expire. (required).</param>
        /// <param name="locktime">Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid. (required).</param>
        /// <param name="overwintered">\&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain. (required).</param>
        /// <param name="saplinged">Defines if the transaction includes sapling or not. (required).</param>
        /// <param name="transactionHash">Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions. (required).</param>
        /// <param name="valueBalance">Defines the transaction value balance. (required).</param>
        /// <param name="version">Represents the transaction version number. (required).</param>
        /// <param name="versionGroupId">Represents the transaction version group ID (required).</param>
        /// <param name="vin">Represents the Inputs of the transaction (required).</param>
        /// <param name="vout">Represents the Inputs of the transaction (required).</param>
        public DecodeRawTransactionHexRISZ(int expiryHeight = default(int), int locktime = default(int), bool overwintered = default(bool), bool saplinged = default(bool), string transactionHash = default(string), string valueBalance = default(string), int version = default(int), string versionGroupId = default(string), List<DecodeRawTransactionHexRISZVinInner> vin = default(List<DecodeRawTransactionHexRISZVinInner>), List<DecodeRawTransactionHexRISZVoutInner> vout = default(List<DecodeRawTransactionHexRISZVoutInner>))
        {
            this.ExpiryHeight = expiryHeight;
            this.Locktime = locktime;
            this.Overwintered = overwintered;
            this.Saplinged = saplinged;
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for DecodeRawTransactionHexRISZ and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "valueBalance" is required (not null)
            if (valueBalance == null)
            {
                throw new ArgumentNullException("valueBalance is a required property for DecodeRawTransactionHexRISZ and cannot be null");
            }
            this.ValueBalance = valueBalance;
            this._Version = version;
            // to ensure "versionGroupId" is required (not null)
            if (versionGroupId == null)
            {
                throw new ArgumentNullException("versionGroupId is a required property for DecodeRawTransactionHexRISZ and cannot be null");
            }
            this.VersionGroupId = versionGroupId;
            // to ensure "vin" is required (not null)
            if (vin == null)
            {
                throw new ArgumentNullException("vin is a required property for DecodeRawTransactionHexRISZ and cannot be null");
            }
            this.Vin = vin;
            // to ensure "vout" is required (not null)
            if (vout == null)
            {
                throw new ArgumentNullException("vout is a required property for DecodeRawTransactionHexRISZ and cannot be null");
            }
            this.Vout = vout;
        }

        /// <summary>
        /// Represents a block height after which the transaction will expire.
        /// </summary>
        /// <value>Represents a block height after which the transaction will expire.</value>
        [DataMember(Name = "expiryHeight", IsRequired = true, EmitDefaultValue = false)]
        public int ExpiryHeight { get; set; }

        /// <summary>
        /// Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid.
        /// </summary>
        /// <value>Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid.</value>
        [DataMember(Name = "locktime", IsRequired = true, EmitDefaultValue = false)]
        public int Locktime { get; set; }

        /// <summary>
        /// \&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain.
        /// </summary>
        /// <value>\&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain.</value>
        [DataMember(Name = "overwintered", IsRequired = true, EmitDefaultValue = true)]
        public bool Overwintered { get; set; }

        /// <summary>
        /// Defines if the transaction includes sapling or not.
        /// </summary>
        /// <value>Defines if the transaction includes sapling or not.</value>
        [DataMember(Name = "saplinged", IsRequired = true, EmitDefaultValue = true)]
        public bool Saplinged { get; set; }

        /// <summary>
        /// Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions.
        /// </summary>
        /// <value>Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions.</value>
        [DataMember(Name = "transactionHash", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Defines the transaction value balance.
        /// </summary>
        /// <value>Defines the transaction value balance.</value>
        [DataMember(Name = "valueBalance", IsRequired = true, EmitDefaultValue = false)]
        public string ValueBalance { get; set; }

        /// <summary>
        /// Represents the transaction version number.
        /// </summary>
        /// <value>Represents the transaction version number.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Represents the transaction version group ID
        /// </summary>
        /// <value>Represents the transaction version group ID</value>
        [DataMember(Name = "versionGroupId", IsRequired = true, EmitDefaultValue = false)]
        public string VersionGroupId { get; set; }

        /// <summary>
        /// Represents the Inputs of the transaction
        /// </summary>
        /// <value>Represents the Inputs of the transaction</value>
        [DataMember(Name = "vin", IsRequired = true, EmitDefaultValue = false)]
        public List<DecodeRawTransactionHexRISZVinInner> Vin { get; set; }

        /// <summary>
        /// Represents the Inputs of the transaction
        /// </summary>
        /// <value>Represents the Inputs of the transaction</value>
        [DataMember(Name = "vout", IsRequired = true, EmitDefaultValue = false)]
        public List<DecodeRawTransactionHexRISZVoutInner> Vout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecodeRawTransactionHexRISZ {\n");
            sb.Append("  ExpiryHeight: ").Append(ExpiryHeight).Append("\n");
            sb.Append("  Locktime: ").Append(Locktime).Append("\n");
            sb.Append("  Overwintered: ").Append(Overwintered).Append("\n");
            sb.Append("  Saplinged: ").Append(Saplinged).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  ValueBalance: ").Append(ValueBalance).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  VersionGroupId: ").Append(VersionGroupId).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("  Vout: ").Append(Vout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecodeRawTransactionHexRISZ);
        }

        /// <summary>
        /// Returns true if DecodeRawTransactionHexRISZ instances are equal
        /// </summary>
        /// <param name="input">Instance of DecodeRawTransactionHexRISZ to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecodeRawTransactionHexRISZ input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpiryHeight == input.ExpiryHeight ||
                    this.ExpiryHeight.Equals(input.ExpiryHeight)
                ) && 
                (
                    this.Locktime == input.Locktime ||
                    this.Locktime.Equals(input.Locktime)
                ) && 
                (
                    this.Overwintered == input.Overwintered ||
                    this.Overwintered.Equals(input.Overwintered)
                ) && 
                (
                    this.Saplinged == input.Saplinged ||
                    this.Saplinged.Equals(input.Saplinged)
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.ValueBalance == input.ValueBalance ||
                    (this.ValueBalance != null &&
                    this.ValueBalance.Equals(input.ValueBalance))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.VersionGroupId == input.VersionGroupId ||
                    (this.VersionGroupId != null &&
                    this.VersionGroupId.Equals(input.VersionGroupId))
                ) && 
                (
                    this.Vin == input.Vin ||
                    this.Vin != null &&
                    input.Vin != null &&
                    this.Vin.SequenceEqual(input.Vin)
                ) && 
                (
                    this.Vout == input.Vout ||
                    this.Vout != null &&
                    input.Vout != null &&
                    this.Vout.SequenceEqual(input.Vout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ExpiryHeight.GetHashCode();
                hashCode = (hashCode * 59) + this.Locktime.GetHashCode();
                hashCode = (hashCode * 59) + this.Overwintered.GetHashCode();
                hashCode = (hashCode * 59) + this.Saplinged.GetHashCode();
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.ValueBalance != null)
                {
                    hashCode = (hashCode * 59) + this.ValueBalance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                if (this.VersionGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionGroupId.GetHashCode();
                }
                if (this.Vin != null)
                {
                    hashCode = (hashCode * 59) + this.Vin.GetHashCode();
                }
                if (this.Vout != null)
                {
                    hashCode = (hashCode * 59) + this.Vout.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
