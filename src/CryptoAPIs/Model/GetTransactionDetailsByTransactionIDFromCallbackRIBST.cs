/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Tron
    /// </summary>
    [DataContract(Name = "GetTransactionDetailsByTransactionIDFromCallbackRIBST")]
    public partial class GetTransactionDetailsByTransactionIDFromCallbackRIBST : IEquatable<GetTransactionDetailsByTransactionIDFromCallbackRIBST>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBST" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetTransactionDetailsByTransactionIDFromCallbackRIBST() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBST" /> class.
        /// </summary>
        /// <param name="amount">Defines the amount of the transaction. (required).</param>
        /// <param name="bandwidthUsed">bandwidthUsed (required).</param>
        /// <param name="contract">Represents the specific transaction contract. (required).</param>
        /// <param name="energyUsed">energyUsed (required).</param>
        /// <param name="hasInternalTransactions">Defines if the transaction includes internal transactions (true) or not (false). (required).</param>
        /// <param name="hasTokenTransfers">Defines if the transaction includes token transfers (true) or not (false). (required).</param>
        /// <param name="input">Represents the transaction&#39;s input value. (required).</param>
        /// <param name="recipients">Represents the recipient address. (required).</param>
        /// <param name="senders">Represents the sender address. (required).</param>
        /// <param name="transactionStatus">Represents the status of this transaction. (required).</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBST(string amount = default(string), GetTransactionDetailsByTransactionIDFromCallbackRIBSTBandwidthUsed bandwidthUsed = default(GetTransactionDetailsByTransactionIDFromCallbackRIBSTBandwidthUsed), string contract = default(string), GetTransactionDetailsByTransactionIDFromCallbackRIBSTEnergyUsed energyUsed = default(GetTransactionDetailsByTransactionIDFromCallbackRIBSTEnergyUsed), bool hasInternalTransactions = default(bool), string hasTokenTransfers = default(string), string input = default(string), string recipients = default(string), string senders = default(string), string transactionStatus = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.Amount = amount;
            // to ensure "bandwidthUsed" is required (not null)
            if (bandwidthUsed == null)
            {
                throw new ArgumentNullException("bandwidthUsed is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.BandwidthUsed = bandwidthUsed;
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new ArgumentNullException("contract is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.Contract = contract;
            // to ensure "energyUsed" is required (not null)
            if (energyUsed == null)
            {
                throw new ArgumentNullException("energyUsed is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.EnergyUsed = energyUsed;
            this.HasInternalTransactions = hasInternalTransactions;
            // to ensure "hasTokenTransfers" is required (not null)
            if (hasTokenTransfers == null)
            {
                throw new ArgumentNullException("hasTokenTransfers is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.HasTokenTransfers = hasTokenTransfers;
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new ArgumentNullException("input is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.Input = input;
            // to ensure "recipients" is required (not null)
            if (recipients == null)
            {
                throw new ArgumentNullException("recipients is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.Recipients = recipients;
            // to ensure "senders" is required (not null)
            if (senders == null)
            {
                throw new ArgumentNullException("senders is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.Senders = senders;
            // to ensure "transactionStatus" is required (not null)
            if (transactionStatus == null)
            {
                throw new ArgumentNullException("transactionStatus is a required property for GetTransactionDetailsByTransactionIDFromCallbackRIBST and cannot be null");
            }
            this.TransactionStatus = transactionStatus;
        }

        /// <summary>
        /// Defines the amount of the transaction.
        /// </summary>
        /// <value>Defines the amount of the transaction.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets BandwidthUsed
        /// </summary>
        [DataMember(Name = "bandwidthUsed", IsRequired = true, EmitDefaultValue = false)]
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSTBandwidthUsed BandwidthUsed { get; set; }

        /// <summary>
        /// Represents the specific transaction contract.
        /// </summary>
        /// <value>Represents the specific transaction contract.</value>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = false)]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets EnergyUsed
        /// </summary>
        [DataMember(Name = "energyUsed", IsRequired = true, EmitDefaultValue = false)]
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSTEnergyUsed EnergyUsed { get; set; }

        /// <summary>
        /// Defines if the transaction includes internal transactions (true) or not (false).
        /// </summary>
        /// <value>Defines if the transaction includes internal transactions (true) or not (false).</value>
        [DataMember(Name = "hasInternalTransactions", IsRequired = true, EmitDefaultValue = true)]
        public bool HasInternalTransactions { get; set; }

        /// <summary>
        /// Defines if the transaction includes token transfers (true) or not (false).
        /// </summary>
        /// <value>Defines if the transaction includes token transfers (true) or not (false).</value>
        [DataMember(Name = "hasTokenTransfers", IsRequired = true, EmitDefaultValue = false)]
        public string HasTokenTransfers { get; set; }

        /// <summary>
        /// Represents the transaction&#39;s input value.
        /// </summary>
        /// <value>Represents the transaction&#39;s input value.</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// Represents the recipient address.
        /// </summary>
        /// <value>Represents the recipient address.</value>
        [DataMember(Name = "recipients", IsRequired = true, EmitDefaultValue = false)]
        public string Recipients { get; set; }

        /// <summary>
        /// Represents the sender address.
        /// </summary>
        /// <value>Represents the sender address.</value>
        [DataMember(Name = "senders", IsRequired = true, EmitDefaultValue = false)]
        public string Senders { get; set; }

        /// <summary>
        /// Represents the status of this transaction.
        /// </summary>
        /// <value>Represents the status of this transaction.</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTransactionDetailsByTransactionIDFromCallbackRIBST {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BandwidthUsed: ").Append(BandwidthUsed).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  EnergyUsed: ").Append(EnergyUsed).Append("\n");
            sb.Append("  HasInternalTransactions: ").Append(HasInternalTransactions).Append("\n");
            sb.Append("  HasTokenTransfers: ").Append(HasTokenTransfers).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Senders: ").Append(Senders).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTransactionDetailsByTransactionIDFromCallbackRIBST);
        }

        /// <summary>
        /// Returns true if GetTransactionDetailsByTransactionIDFromCallbackRIBST instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTransactionDetailsByTransactionIDFromCallbackRIBST to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTransactionDetailsByTransactionIDFromCallbackRIBST input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BandwidthUsed == input.BandwidthUsed ||
                    (this.BandwidthUsed != null &&
                    this.BandwidthUsed.Equals(input.BandwidthUsed))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.EnergyUsed == input.EnergyUsed ||
                    (this.EnergyUsed != null &&
                    this.EnergyUsed.Equals(input.EnergyUsed))
                ) && 
                (
                    this.HasInternalTransactions == input.HasInternalTransactions ||
                    this.HasInternalTransactions.Equals(input.HasInternalTransactions)
                ) && 
                (
                    this.HasTokenTransfers == input.HasTokenTransfers ||
                    (this.HasTokenTransfers != null &&
                    this.HasTokenTransfers.Equals(input.HasTokenTransfers))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    (this.Recipients != null &&
                    this.Recipients.Equals(input.Recipients))
                ) && 
                (
                    this.Senders == input.Senders ||
                    (this.Senders != null &&
                    this.Senders.Equals(input.Senders))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BandwidthUsed != null)
                {
                    hashCode = (hashCode * 59) + this.BandwidthUsed.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                if (this.EnergyUsed != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyUsed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasInternalTransactions.GetHashCode();
                if (this.HasTokenTransfers != null)
                {
                    hashCode = (hashCode * 59) + this.HasTokenTransfers.GetHashCode();
                }
                if (this.Input != null)
                {
                    hashCode = (hashCode * 59) + this.Input.GetHashCode();
                }
                if (this.Recipients != null)
                {
                    hashCode = (hashCode * 59) + this.Recipients.GetHashCode();
                }
                if (this.Senders != null)
                {
                    hashCode = (hashCode * 59) + this.Senders.GetHashCode();
                }
                if (this.TransactionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
