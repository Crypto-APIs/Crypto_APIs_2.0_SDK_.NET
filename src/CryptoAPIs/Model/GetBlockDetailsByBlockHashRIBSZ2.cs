/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Zilliqa
    /// </summary>
    [DataContract(Name = "GetBlockDetailsByBlockHashRIBSZ2")]
    public partial class GetBlockDetailsByBlockHashRIBSZ2 : IEquatable<GetBlockDetailsByBlockHashRIBSZ2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHashRIBSZ2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetBlockDetailsByBlockHashRIBSZ2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHashRIBSZ2" /> class.
        /// </summary>
        /// <param name="difficulty">Represents a mathematical value of how hard it is to find a valid hash for this block. (required).</param>
        /// <param name="dsBlock">Numeric representation of the ds block (required).</param>
        /// <param name="dsDifficulty">Numeric representation of the ds difficulty (required).</param>
        /// <param name="dsLeader">String representation of the ds leader (required).</param>
        /// <param name="gasLimit">Numeric representation of the block gas_limit (required).</param>
        /// <param name="gasUsed">Numeric representation of the block gas_limit (required).</param>
        /// <param name="microBlocks">microBlocks (required).</param>
        public GetBlockDetailsByBlockHashRIBSZ2(string difficulty = default(string), int dsBlock = default(int), string dsDifficulty = default(string), string dsLeader = default(string), int gasLimit = default(int), int gasUsed = default(int), List<string> microBlocks = default(List<string>))
        {
            // to ensure "difficulty" is required (not null)
            if (difficulty == null)
            {
                throw new ArgumentNullException("difficulty is a required property for GetBlockDetailsByBlockHashRIBSZ2 and cannot be null");
            }
            this.Difficulty = difficulty;
            this.DsBlock = dsBlock;
            // to ensure "dsDifficulty" is required (not null)
            if (dsDifficulty == null)
            {
                throw new ArgumentNullException("dsDifficulty is a required property for GetBlockDetailsByBlockHashRIBSZ2 and cannot be null");
            }
            this.DsDifficulty = dsDifficulty;
            // to ensure "dsLeader" is required (not null)
            if (dsLeader == null)
            {
                throw new ArgumentNullException("dsLeader is a required property for GetBlockDetailsByBlockHashRIBSZ2 and cannot be null");
            }
            this.DsLeader = dsLeader;
            this.GasLimit = gasLimit;
            this.GasUsed = gasUsed;
            // to ensure "microBlocks" is required (not null)
            if (microBlocks == null)
            {
                throw new ArgumentNullException("microBlocks is a required property for GetBlockDetailsByBlockHashRIBSZ2 and cannot be null");
            }
            this.MicroBlocks = microBlocks;
        }

        /// <summary>
        /// Represents a mathematical value of how hard it is to find a valid hash for this block.
        /// </summary>
        /// <value>Represents a mathematical value of how hard it is to find a valid hash for this block.</value>
        [DataMember(Name = "difficulty", IsRequired = true, EmitDefaultValue = false)]
        public string Difficulty { get; set; }

        /// <summary>
        /// Numeric representation of the ds block
        /// </summary>
        /// <value>Numeric representation of the ds block</value>
        [DataMember(Name = "dsBlock", IsRequired = true, EmitDefaultValue = false)]
        public int DsBlock { get; set; }

        /// <summary>
        /// Numeric representation of the ds difficulty
        /// </summary>
        /// <value>Numeric representation of the ds difficulty</value>
        [DataMember(Name = "dsDifficulty", IsRequired = true, EmitDefaultValue = false)]
        public string DsDifficulty { get; set; }

        /// <summary>
        /// String representation of the ds leader
        /// </summary>
        /// <value>String representation of the ds leader</value>
        [DataMember(Name = "dsLeader", IsRequired = true, EmitDefaultValue = false)]
        public string DsLeader { get; set; }

        /// <summary>
        /// Numeric representation of the block gas_limit
        /// </summary>
        /// <value>Numeric representation of the block gas_limit</value>
        [DataMember(Name = "gasLimit", IsRequired = true, EmitDefaultValue = false)]
        public int GasLimit { get; set; }

        /// <summary>
        /// Numeric representation of the block gas_limit
        /// </summary>
        /// <value>Numeric representation of the block gas_limit</value>
        [DataMember(Name = "gasUsed", IsRequired = true, EmitDefaultValue = false)]
        public int GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets MicroBlocks
        /// </summary>
        [DataMember(Name = "microBlocks", IsRequired = true, EmitDefaultValue = false)]
        public List<string> MicroBlocks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBlockDetailsByBlockHashRIBSZ2 {\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  DsBlock: ").Append(DsBlock).Append("\n");
            sb.Append("  DsDifficulty: ").Append(DsDifficulty).Append("\n");
            sb.Append("  DsLeader: ").Append(DsLeader).Append("\n");
            sb.Append("  GasLimit: ").Append(GasLimit).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  MicroBlocks: ").Append(MicroBlocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBlockDetailsByBlockHashRIBSZ2);
        }

        /// <summary>
        /// Returns true if GetBlockDetailsByBlockHashRIBSZ2 instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBlockDetailsByBlockHashRIBSZ2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBlockDetailsByBlockHashRIBSZ2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Difficulty == input.Difficulty ||
                    (this.Difficulty != null &&
                    this.Difficulty.Equals(input.Difficulty))
                ) && 
                (
                    this.DsBlock == input.DsBlock ||
                    this.DsBlock.Equals(input.DsBlock)
                ) && 
                (
                    this.DsDifficulty == input.DsDifficulty ||
                    (this.DsDifficulty != null &&
                    this.DsDifficulty.Equals(input.DsDifficulty))
                ) && 
                (
                    this.DsLeader == input.DsLeader ||
                    (this.DsLeader != null &&
                    this.DsLeader.Equals(input.DsLeader))
                ) && 
                (
                    this.GasLimit == input.GasLimit ||
                    this.GasLimit.Equals(input.GasLimit)
                ) && 
                (
                    this.GasUsed == input.GasUsed ||
                    this.GasUsed.Equals(input.GasUsed)
                ) && 
                (
                    this.MicroBlocks == input.MicroBlocks ||
                    this.MicroBlocks != null &&
                    input.MicroBlocks != null &&
                    this.MicroBlocks.SequenceEqual(input.MicroBlocks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Difficulty != null)
                {
                    hashCode = (hashCode * 59) + this.Difficulty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DsBlock.GetHashCode();
                if (this.DsDifficulty != null)
                {
                    hashCode = (hashCode * 59) + this.DsDifficulty.GetHashCode();
                }
                if (this.DsLeader != null)
                {
                    hashCode = (hashCode * 59) + this.DsLeader.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GasLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.GasUsed.GetHashCode();
                if (this.MicroBlocks != null)
                {
                    hashCode = (hashCode * 59) + this.MicroBlocks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
