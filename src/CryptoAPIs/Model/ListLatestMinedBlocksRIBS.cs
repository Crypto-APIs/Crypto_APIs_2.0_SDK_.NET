/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListLatestMinedBlocksRIBS
    /// </summary>
    [JsonConverter(typeof(ListLatestMinedBlocksRIBSJsonConverter))]
    [DataContract(Name = "ListLatestMinedBlocksRIBS")]
    public partial class ListLatestMinedBlocksRIBS : AbstractOpenAPISchema, IEquatable<ListLatestMinedBlocksRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSB.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSBC.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSBSC.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSD.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSD2.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSE.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSEC.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSL.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSZ.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListLatestMinedBlocksRIBS" /> class
        /// with the <see cref="ListLatestMinedBlocksRIBSZ2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListLatestMinedBlocksRIBSZ2.</param>
        public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSZ2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ListLatestMinedBlocksRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSZ))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListLatestMinedBlocksRIBSZ2))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSB`. If the actual instance is not `ListLatestMinedBlocksRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSB</returns>
        public ListLatestMinedBlocksRIBSB GetListLatestMinedBlocksRIBSB()
        {
            return (ListLatestMinedBlocksRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSBC`. If the actual instance is not `ListLatestMinedBlocksRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSBC</returns>
        public ListLatestMinedBlocksRIBSBC GetListLatestMinedBlocksRIBSBC()
        {
            return (ListLatestMinedBlocksRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSBSC`. If the actual instance is not `ListLatestMinedBlocksRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSBSC</returns>
        public ListLatestMinedBlocksRIBSBSC GetListLatestMinedBlocksRIBSBSC()
        {
            return (ListLatestMinedBlocksRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSD`. If the actual instance is not `ListLatestMinedBlocksRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSD</returns>
        public ListLatestMinedBlocksRIBSD GetListLatestMinedBlocksRIBSD()
        {
            return (ListLatestMinedBlocksRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSD2`. If the actual instance is not `ListLatestMinedBlocksRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSD2</returns>
        public ListLatestMinedBlocksRIBSD2 GetListLatestMinedBlocksRIBSD2()
        {
            return (ListLatestMinedBlocksRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSE`. If the actual instance is not `ListLatestMinedBlocksRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSE</returns>
        public ListLatestMinedBlocksRIBSE GetListLatestMinedBlocksRIBSE()
        {
            return (ListLatestMinedBlocksRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSEC`. If the actual instance is not `ListLatestMinedBlocksRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSEC</returns>
        public ListLatestMinedBlocksRIBSEC GetListLatestMinedBlocksRIBSEC()
        {
            return (ListLatestMinedBlocksRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSL`. If the actual instance is not `ListLatestMinedBlocksRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSL</returns>
        public ListLatestMinedBlocksRIBSL GetListLatestMinedBlocksRIBSL()
        {
            return (ListLatestMinedBlocksRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSZ`. If the actual instance is not `ListLatestMinedBlocksRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSZ</returns>
        public ListLatestMinedBlocksRIBSZ GetListLatestMinedBlocksRIBSZ()
        {
            return (ListLatestMinedBlocksRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListLatestMinedBlocksRIBSZ2`. If the actual instance is not `ListLatestMinedBlocksRIBSZ2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListLatestMinedBlocksRIBSZ2</returns>
        public ListLatestMinedBlocksRIBSZ2 GetListLatestMinedBlocksRIBSZ2()
        {
            return (ListLatestMinedBlocksRIBSZ2)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListLatestMinedBlocksRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ListLatestMinedBlocksRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ListLatestMinedBlocksRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ListLatestMinedBlocksRIBS</returns>
        public static ListLatestMinedBlocksRIBS FromJson(string jsonString)
        {
            ListLatestMinedBlocksRIBS newListLatestMinedBlocksRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newListLatestMinedBlocksRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSB>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSB>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSBC>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSBC>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSBSC>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSBSC>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSD>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSD>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSD2>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSD2>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSE>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSE>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSEC>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSEC>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSL>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSL>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSZ>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSZ>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSZ: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListLatestMinedBlocksRIBSZ2).GetProperty("AdditionalProperties") == null)
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSZ2>(jsonString, ListLatestMinedBlocksRIBS.SerializerSettings));
                }
                else
                {
                    newListLatestMinedBlocksRIBS = new ListLatestMinedBlocksRIBS(JsonConvert.DeserializeObject<ListLatestMinedBlocksRIBSZ2>(jsonString, ListLatestMinedBlocksRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListLatestMinedBlocksRIBSZ2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListLatestMinedBlocksRIBSZ2: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newListLatestMinedBlocksRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListLatestMinedBlocksRIBS);
        }

        /// <summary>
        /// Returns true if ListLatestMinedBlocksRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of ListLatestMinedBlocksRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListLatestMinedBlocksRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ListLatestMinedBlocksRIBS
    /// </summary>
    public class ListLatestMinedBlocksRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ListLatestMinedBlocksRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ListLatestMinedBlocksRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
