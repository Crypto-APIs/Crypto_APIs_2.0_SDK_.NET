/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListUnconfirmedOmniTransactionsByPropertyIDRI
    /// </summary>
    [DataContract(Name = "ListUnconfirmedOmniTransactionsByPropertyIDRI")]
    public partial class ListUnconfirmedOmniTransactionsByPropertyIDRI : IEquatable<ListUnconfirmedOmniTransactionsByPropertyIDRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedOmniTransactionsByPropertyIDRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListUnconfirmedOmniTransactionsByPropertyIDRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedOmniTransactionsByPropertyIDRI" /> class.
        /// </summary>
        /// <param name="amount">Defines the amount of the sent tokens. (required).</param>
        /// <param name="divisible">Defines whether the attribute can be divisible or not, as boolean. E.g., if it is \&quot;true\&quot;, the attribute is divisible. (required).</param>
        /// <param name="mined">Defines whether the transaction has been mined or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is mined. (required).</param>
        /// <param name="propertyId">Represents the identifier of the tokens to send. (required).</param>
        /// <param name="recipients">Represents an object of addresses that receive the transactions. (required).</param>
        /// <param name="senders">Represents an object of addresses that provide the funds. (required).</param>
        /// <param name="sent">Defines whether the transaction has been sent or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is sent. (required).</param>
        /// <param name="timestamp">Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed. (required).</param>
        /// <param name="transactionId">Represents the unique identifier of a transaction, i.e. it could be &#x60;transactionId&#x60; in UTXO-based protocols like Bitcoin, and transaction &#x60;hash&#x60; in Ethereum blockchain. (required).</param>
        /// <param name="type">Defines the type of the transaction as a string. (required).</param>
        /// <param name="typeIint">Defines the type of the transaction as a number. (required).</param>
        /// <param name="version">Defines the specific version. (required).</param>
        /// <param name="fee">fee (required).</param>
        public ListUnconfirmedOmniTransactionsByPropertyIDRI(string amount = default(string), bool divisible = default(bool), bool mined = default(bool), int propertyId = default(int), List<ListOmniTransactionsByAddressRIRecipients> recipients = default(List<ListOmniTransactionsByAddressRIRecipients>), List<GetUnconfirmedOmniTransactionByTransactionIDTxidRISenders> senders = default(List<GetUnconfirmedOmniTransactionByTransactionIDTxidRISenders>), bool sent = default(bool), int timestamp = default(int), string transactionId = default(string), string type = default(string), int typeIint = default(int), int version = default(int), ListUnconfirmedOmniTransactionsByAddressRIFee fee = default(ListUnconfirmedOmniTransactionsByAddressRIFee))
        {
            // to ensure "amount" is required (not null)
            if (amount == null) {
                throw new ArgumentNullException("amount is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.Amount = amount;
            this.Divisible = divisible;
            this.Mined = mined;
            this.PropertyId = propertyId;
            // to ensure "recipients" is required (not null)
            if (recipients == null) {
                throw new ArgumentNullException("recipients is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.Recipients = recipients;
            // to ensure "senders" is required (not null)
            if (senders == null) {
                throw new ArgumentNullException("senders is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.Senders = senders;
            this.Sent = sent;
            this.Timestamp = timestamp;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null) {
                throw new ArgumentNullException("transactionId is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.Type = type;
            this.TypeIint = typeIint;
            this._Version = version;
            // to ensure "fee" is required (not null)
            if (fee == null) {
                throw new ArgumentNullException("fee is a required property for ListUnconfirmedOmniTransactionsByPropertyIDRI and cannot be null");
            }
            this.Fee = fee;
        }

        /// <summary>
        /// Defines the amount of the sent tokens.
        /// </summary>
        /// <value>Defines the amount of the sent tokens.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Defines whether the attribute can be divisible or not, as boolean. E.g., if it is \&quot;true\&quot;, the attribute is divisible.
        /// </summary>
        /// <value>Defines whether the attribute can be divisible or not, as boolean. E.g., if it is \&quot;true\&quot;, the attribute is divisible.</value>
        [DataMember(Name = "divisible", IsRequired = true, EmitDefaultValue = true)]
        public bool Divisible { get; set; }

        /// <summary>
        /// Defines whether the transaction has been mined or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is mined.
        /// </summary>
        /// <value>Defines whether the transaction has been mined or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is mined.</value>
        [DataMember(Name = "mined", IsRequired = true, EmitDefaultValue = true)]
        public bool Mined { get; set; }

        /// <summary>
        /// Represents the identifier of the tokens to send.
        /// </summary>
        /// <value>Represents the identifier of the tokens to send.</value>
        [DataMember(Name = "propertyId", IsRequired = true, EmitDefaultValue = false)]
        public int PropertyId { get; set; }

        /// <summary>
        /// Represents an object of addresses that receive the transactions.
        /// </summary>
        /// <value>Represents an object of addresses that receive the transactions.</value>
        [DataMember(Name = "recipients", IsRequired = true, EmitDefaultValue = false)]
        public List<ListOmniTransactionsByAddressRIRecipients> Recipients { get; set; }

        /// <summary>
        /// Represents an object of addresses that provide the funds.
        /// </summary>
        /// <value>Represents an object of addresses that provide the funds.</value>
        [DataMember(Name = "senders", IsRequired = true, EmitDefaultValue = false)]
        public List<GetUnconfirmedOmniTransactionByTransactionIDTxidRISenders> Senders { get; set; }

        /// <summary>
        /// Defines whether the transaction has been sent or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is sent.
        /// </summary>
        /// <value>Defines whether the transaction has been sent or not, as boolean. E.g. if set to \&quot;true\&quot;, it means the transaction is sent.</value>
        [DataMember(Name = "sent", IsRequired = true, EmitDefaultValue = true)]
        public bool Sent { get; set; }

        /// <summary>
        /// Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
        /// </summary>
        /// <value>Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Represents the unique identifier of a transaction, i.e. it could be &#x60;transactionId&#x60; in UTXO-based protocols like Bitcoin, and transaction &#x60;hash&#x60; in Ethereum blockchain.
        /// </summary>
        /// <value>Represents the unique identifier of a transaction, i.e. it could be &#x60;transactionId&#x60; in UTXO-based protocols like Bitcoin, and transaction &#x60;hash&#x60; in Ethereum blockchain.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Defines the type of the transaction as a string.
        /// </summary>
        /// <value>Defines the type of the transaction as a string.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Defines the type of the transaction as a number.
        /// </summary>
        /// <value>Defines the type of the transaction as a number.</value>
        [DataMember(Name = "typeIint", IsRequired = true, EmitDefaultValue = false)]
        public int TypeIint { get; set; }

        /// <summary>
        /// Defines the specific version.
        /// </summary>
        /// <value>Defines the specific version.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public ListUnconfirmedOmniTransactionsByAddressRIFee Fee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListUnconfirmedOmniTransactionsByPropertyIDRI {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Divisible: ").Append(Divisible).Append("\n");
            sb.Append("  Mined: ").Append(Mined).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Senders: ").Append(Senders).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeIint: ").Append(TypeIint).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListUnconfirmedOmniTransactionsByPropertyIDRI);
        }

        /// <summary>
        /// Returns true if ListUnconfirmedOmniTransactionsByPropertyIDRI instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUnconfirmedOmniTransactionsByPropertyIDRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUnconfirmedOmniTransactionsByPropertyIDRI input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Divisible == input.Divisible ||
                    this.Divisible.Equals(input.Divisible)
                ) && 
                (
                    this.Mined == input.Mined ||
                    this.Mined.Equals(input.Mined)
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    this.PropertyId.Equals(input.PropertyId)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Senders == input.Senders ||
                    this.Senders != null &&
                    input.Senders != null &&
                    this.Senders.SequenceEqual(input.Senders)
                ) && 
                (
                    this.Sent == input.Sent ||
                    this.Sent.Equals(input.Sent)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeIint == input.TypeIint ||
                    this.TypeIint.Equals(input.TypeIint)
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Divisible.GetHashCode();
                hashCode = hashCode * 59 + this.Mined.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Senders != null)
                    hashCode = hashCode * 59 + this.Senders.GetHashCode();
                hashCode = hashCode * 59 + this.Sent.GetHashCode();
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.TypeIint.GetHashCode();
                hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
