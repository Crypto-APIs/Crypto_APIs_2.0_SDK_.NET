/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
    /// </summary>
    [DataContract(Name = "PrepareAUTXO-BasedTransactionFromHDWalletXPubYPubZPubRI")]
    public partial class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI : IEquatable<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI" /> class.
        /// </summary>
        /// <param name="additionalData">Representation of the additional data.</param>
        /// <param name="fee">When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value. (required).</param>
        /// <param name="feePerByte">Defines the fee per byte value.</param>
        /// <param name="locktime">Represents the time at which a particular transaction can be added to the blockchain. (required).</param>
        /// <param name="replaceable">Representation of whether the transaction is replaceable (required).</param>
        /// <param name="size">Represents the total size of this transaction. (required).</param>
        /// <param name="vin">Represents the transaction inputs. (required).</param>
        /// <param name="vout">Represents the transaction outputs. (required).</param>
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI(string additionalData = default(string), string fee = default(string), string feePerByte = default(string), long locktime = default(long), bool replaceable = default(bool), int size = default(int), List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> vin = default(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner>), List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> vout = default(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner>))
        {
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Fee = fee;
            this.Locktime = locktime;
            this.Replaceable = replaceable;
            this.Size = size;
            // to ensure "vin" is required (not null)
            if (vin == null)
            {
                throw new ArgumentNullException("vin is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Vin = vin;
            // to ensure "vout" is required (not null)
            if (vout == null)
            {
                throw new ArgumentNullException("vout is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Vout = vout;
            this.AdditionalData = additionalData;
            this.FeePerByte = feePerByte;
        }

        /// <summary>
        /// Representation of the additional data
        /// </summary>
        /// <value>Representation of the additional data</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.
        /// </summary>
        /// <value>When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.</value>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public string Fee { get; set; }

        /// <summary>
        /// Defines the fee per byte value
        /// </summary>
        /// <value>Defines the fee per byte value</value>
        [DataMember(Name = "feePerByte", EmitDefaultValue = false)]
        public string FeePerByte { get; set; }

        /// <summary>
        /// Represents the time at which a particular transaction can be added to the blockchain.
        /// </summary>
        /// <value>Represents the time at which a particular transaction can be added to the blockchain.</value>
        [DataMember(Name = "locktime", IsRequired = true, EmitDefaultValue = false)]
        public long Locktime { get; set; }

        /// <summary>
        /// Representation of whether the transaction is replaceable
        /// </summary>
        /// <value>Representation of whether the transaction is replaceable</value>
        [DataMember(Name = "replaceable", IsRequired = true, EmitDefaultValue = true)]
        public bool Replaceable { get; set; }

        /// <summary>
        /// Represents the total size of this transaction.
        /// </summary>
        /// <value>Represents the total size of this transaction.</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Represents the transaction inputs.
        /// </summary>
        /// <value>Represents the transaction inputs.</value>
        [DataMember(Name = "vin", IsRequired = true, EmitDefaultValue = false)]
        public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> Vin { get; set; }

        /// <summary>
        /// Represents the transaction outputs.
        /// </summary>
        /// <value>Represents the transaction outputs.</value>
        [DataMember(Name = "vout", IsRequired = true, EmitDefaultValue = false)]
        public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> Vout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  FeePerByte: ").Append(FeePerByte).Append("\n");
            sb.Append("  Locktime: ").Append(Locktime).Append("\n");
            sb.Append("  Replaceable: ").Append(Replaceable).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("  Vout: ").Append(Vout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI);
        }

        /// <summary>
        /// Returns true if PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.FeePerByte == input.FeePerByte ||
                    (this.FeePerByte != null &&
                    this.FeePerByte.Equals(input.FeePerByte))
                ) && 
                (
                    this.Locktime == input.Locktime ||
                    this.Locktime.Equals(input.Locktime)
                ) && 
                (
                    this.Replaceable == input.Replaceable ||
                    this.Replaceable.Equals(input.Replaceable)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Vin == input.Vin ||
                    this.Vin != null &&
                    input.Vin != null &&
                    this.Vin.SequenceEqual(input.Vin)
                ) && 
                (
                    this.Vout == input.Vout ||
                    this.Vout != null &&
                    input.Vout != null &&
                    this.Vout.SequenceEqual(input.Vout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.FeePerByte != null)
                {
                    hashCode = (hashCode * 59) + this.FeePerByte.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Locktime.GetHashCode();
                hashCode = (hashCode * 59) + this.Replaceable.GetHashCode();
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.Vin != null)
                {
                    hashCode = (hashCode * 59) + this.Vin.GetHashCode();
                }
                if (this.Vout != null)
                {
                    hashCode = (hashCode * 59) + this.Vout.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
