/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListTokensByAddressRI
    /// </summary>
    [DataContract(Name = "ListTokensByAddressRI")]
    public partial class ListTokensByAddressRI : IEquatable<ListTokensByAddressRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListTokensByAddressRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListTokensByAddressRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListTokensByAddressRI" /> class.
        /// </summary>
        /// <param name="confirmedBalance">Defines the token balance that has been confirmed. (required).</param>
        /// <param name="contractAddress">Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens. (required).</param>
        /// <param name="name">Defines the token&#39;s name as a string. (required).</param>
        /// <param name="symbol">Defines the token symbol by which the token contract is known. It is usually 3-4 characters in length. (required).</param>
        /// <param name="type">Defines the specific token type. (required).</param>
        public ListTokensByAddressRI(string confirmedBalance = default(string), string contractAddress = default(string), string name = default(string), string symbol = default(string), string type = default(string))
        {
            // to ensure "confirmedBalance" is required (not null)
            if (confirmedBalance == null) {
                throw new ArgumentNullException("confirmedBalance is a required property for ListTokensByAddressRI and cannot be null");
            }
            this.ConfirmedBalance = confirmedBalance;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null) {
                throw new ArgumentNullException("contractAddress is a required property for ListTokensByAddressRI and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ListTokensByAddressRI and cannot be null");
            }
            this.Name = name;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for ListTokensByAddressRI and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for ListTokensByAddressRI and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// Defines the token balance that has been confirmed.
        /// </summary>
        /// <value>Defines the token balance that has been confirmed.</value>
        [DataMember(Name = "confirmedBalance", IsRequired = true, EmitDefaultValue = false)]
        public string ConfirmedBalance { get; set; }

        /// <summary>
        /// Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.
        /// </summary>
        /// <value>Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.</value>
        [DataMember(Name = "contractAddress", IsRequired = true, EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Defines the token&#39;s name as a string.
        /// </summary>
        /// <value>Defines the token&#39;s name as a string.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Defines the token symbol by which the token contract is known. It is usually 3-4 characters in length.
        /// </summary>
        /// <value>Defines the token symbol by which the token contract is known. It is usually 3-4 characters in length.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Defines the specific token type.
        /// </summary>
        /// <value>Defines the specific token type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListTokensByAddressRI {\n");
            sb.Append("  ConfirmedBalance: ").Append(ConfirmedBalance).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListTokensByAddressRI);
        }

        /// <summary>
        /// Returns true if ListTokensByAddressRI instances are equal
        /// </summary>
        /// <param name="input">Instance of ListTokensByAddressRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListTokensByAddressRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConfirmedBalance == input.ConfirmedBalance ||
                    (this.ConfirmedBalance != null &&
                    this.ConfirmedBalance.Equals(input.ConfirmedBalance))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfirmedBalance != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmedBalance.GetHashCode();
                }
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
