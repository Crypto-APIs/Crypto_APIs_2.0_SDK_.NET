/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListUnconfirmedTransactionsByAddressRIBS
    /// </summary>
    [JsonConverter(typeof(ListUnconfirmedTransactionsByAddressRIBSJsonConverter))]
    [DataContract(Name = "ListUnconfirmedTransactionsByAddressRIBS")]
    public partial class ListUnconfirmedTransactionsByAddressRIBS : AbstractOpenAPISchema, IEquatable<ListUnconfirmedTransactionsByAddressRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSB.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSBC.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSL.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSD.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSD2.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSE.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSEC.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSZ.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnconfirmedTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListUnconfirmedTransactionsByAddressRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListUnconfirmedTransactionsByAddressRIBSBSC.</param>
        public ListUnconfirmedTransactionsByAddressRIBS(ListUnconfirmedTransactionsByAddressRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListUnconfirmedTransactionsByAddressRIBSZ))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSB`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSB</returns>
        public ListUnconfirmedTransactionsByAddressRIBSB GetListUnconfirmedTransactionsByAddressRIBSB()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSBC`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSBC</returns>
        public ListUnconfirmedTransactionsByAddressRIBSBC GetListUnconfirmedTransactionsByAddressRIBSBC()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSL`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSL</returns>
        public ListUnconfirmedTransactionsByAddressRIBSL GetListUnconfirmedTransactionsByAddressRIBSL()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSD`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSD</returns>
        public ListUnconfirmedTransactionsByAddressRIBSD GetListUnconfirmedTransactionsByAddressRIBSD()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSD2`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSD2</returns>
        public ListUnconfirmedTransactionsByAddressRIBSD2 GetListUnconfirmedTransactionsByAddressRIBSD2()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSE`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSE</returns>
        public ListUnconfirmedTransactionsByAddressRIBSE GetListUnconfirmedTransactionsByAddressRIBSE()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSEC`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSEC</returns>
        public ListUnconfirmedTransactionsByAddressRIBSEC GetListUnconfirmedTransactionsByAddressRIBSEC()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSZ`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSZ</returns>
        public ListUnconfirmedTransactionsByAddressRIBSZ GetListUnconfirmedTransactionsByAddressRIBSZ()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListUnconfirmedTransactionsByAddressRIBSBSC`. If the actual instance is not `ListUnconfirmedTransactionsByAddressRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBSBSC</returns>
        public ListUnconfirmedTransactionsByAddressRIBSBSC GetListUnconfirmedTransactionsByAddressRIBSBSC()
        {
            return (ListUnconfirmedTransactionsByAddressRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListUnconfirmedTransactionsByAddressRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ListUnconfirmedTransactionsByAddressRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ListUnconfirmedTransactionsByAddressRIBS</returns>
        public static ListUnconfirmedTransactionsByAddressRIBS FromJson(string jsonString)
        {
            ListUnconfirmedTransactionsByAddressRIBS newListUnconfirmedTransactionsByAddressRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newListUnconfirmedTransactionsByAddressRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSB>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSB>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSBC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSBC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSBSC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSBSC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSD>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSD>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSD2>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSD2>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSE>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSE>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSEC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSEC>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSL>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSL>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListUnconfirmedTransactionsByAddressRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSZ>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListUnconfirmedTransactionsByAddressRIBS = new ListUnconfirmedTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListUnconfirmedTransactionsByAddressRIBSZ>(jsonString, ListUnconfirmedTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListUnconfirmedTransactionsByAddressRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListUnconfirmedTransactionsByAddressRIBSZ: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newListUnconfirmedTransactionsByAddressRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListUnconfirmedTransactionsByAddressRIBS);
        }

        /// <summary>
        /// Returns true if ListUnconfirmedTransactionsByAddressRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUnconfirmedTransactionsByAddressRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUnconfirmedTransactionsByAddressRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ListUnconfirmedTransactionsByAddressRIBS
    /// </summary>
    public class ListUnconfirmedTransactionsByAddressRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ListUnconfirmedTransactionsByAddressRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ListUnconfirmedTransactionsByAddressRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
