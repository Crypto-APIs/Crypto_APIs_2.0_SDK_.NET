/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListUnspentTransactionOutputsByAddressRIBlockchainSpecific
    /// </summary>
    [DataContract(Name = "ListUnspentTransactionOutputsByAddressRI_blockchainSpecific")]
    public partial class ListUnspentTransactionOutputsByAddressRIBlockchainSpecific : IEquatable<ListUnspentTransactionOutputsByAddressRIBlockchainSpecific>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnspentTransactionOutputsByAddressRIBlockchainSpecific" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListUnspentTransactionOutputsByAddressRIBlockchainSpecific() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnspentTransactionOutputsByAddressRIBlockchainSpecific" /> class.
        /// </summary>
        /// <param name="vSize">Represents the virtual size of this transaction (required).</param>
        /// <param name="bindingSig">It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions. (required).</param>
        /// <param name="expiryHeight">Represents a block height after which the transaction will expire. (required).</param>
        /// <param name="joinSplitPubKey">Represents an encoding of a JoinSplitSig public validating key. (required).</param>
        /// <param name="joinSplitSig">Is used to sign transactions that contain at least one JoinSplit description. (required).</param>
        /// <param name="overwintered">\&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain. (required).</param>
        /// <param name="vJoinSplit">Represents a sequence of JoinSplit descriptions using BCTV14 proofs..</param>
        /// <param name="vShieldedOutput">Object Array representation of transaction output descriptions.</param>
        /// <param name="vShieldedSpend">Object Array representation of transaction spend descriptions (required).</param>
        /// <param name="valueBalance">Defines the transaction value balance. (required).</param>
        /// <param name="versionGroupId">Represents the transaction version group ID. (required).</param>
        public ListUnspentTransactionOutputsByAddressRIBlockchainSpecific(int vSize = default(int), string bindingSig = default(string), int expiryHeight = default(int), string joinSplitPubKey = default(string), string joinSplitSig = default(string), bool overwintered = default(bool), List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVJoinSplit> vJoinSplit = default(List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVJoinSplit>), List<GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput> vShieldedOutput = default(List<GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput>), List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend> vShieldedSpend = default(List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend>), string valueBalance = default(string), string versionGroupId = default(string))
        {
            this.VSize = vSize;
            // to ensure "bindingSig" is required (not null)
            if (bindingSig == null) {
                throw new ArgumentNullException("bindingSig is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.BindingSig = bindingSig;
            this.ExpiryHeight = expiryHeight;
            // to ensure "joinSplitPubKey" is required (not null)
            if (joinSplitPubKey == null) {
                throw new ArgumentNullException("joinSplitPubKey is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.JoinSplitPubKey = joinSplitPubKey;
            // to ensure "joinSplitSig" is required (not null)
            if (joinSplitSig == null) {
                throw new ArgumentNullException("joinSplitSig is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.JoinSplitSig = joinSplitSig;
            this.Overwintered = overwintered;
            // to ensure "vShieldedSpend" is required (not null)
            if (vShieldedSpend == null) {
                throw new ArgumentNullException("vShieldedSpend is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.VShieldedSpend = vShieldedSpend;
            // to ensure "valueBalance" is required (not null)
            if (valueBalance == null) {
                throw new ArgumentNullException("valueBalance is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.ValueBalance = valueBalance;
            // to ensure "versionGroupId" is required (not null)
            if (versionGroupId == null) {
                throw new ArgumentNullException("versionGroupId is a required property for ListUnspentTransactionOutputsByAddressRIBlockchainSpecific and cannot be null");
            }
            this.VersionGroupId = versionGroupId;
            this.VJoinSplit = vJoinSplit;
            this.VShieldedOutput = vShieldedOutput;
        }

        /// <summary>
        /// Represents the virtual size of this transaction
        /// </summary>
        /// <value>Represents the virtual size of this transaction</value>
        [DataMember(Name = "vSize", IsRequired = true, EmitDefaultValue = false)]
        public int VSize { get; set; }

        /// <summary>
        /// It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.
        /// </summary>
        /// <value>It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.</value>
        [DataMember(Name = "bindingSig", IsRequired = true, EmitDefaultValue = false)]
        public string BindingSig { get; set; }

        /// <summary>
        /// Represents a block height after which the transaction will expire.
        /// </summary>
        /// <value>Represents a block height after which the transaction will expire.</value>
        [DataMember(Name = "expiryHeight", IsRequired = true, EmitDefaultValue = false)]
        public int ExpiryHeight { get; set; }

        /// <summary>
        /// Represents an encoding of a JoinSplitSig public validating key.
        /// </summary>
        /// <value>Represents an encoding of a JoinSplitSig public validating key.</value>
        [DataMember(Name = "joinSplitPubKey", IsRequired = true, EmitDefaultValue = false)]
        public string JoinSplitPubKey { get; set; }

        /// <summary>
        /// Is used to sign transactions that contain at least one JoinSplit description.
        /// </summary>
        /// <value>Is used to sign transactions that contain at least one JoinSplit description.</value>
        [DataMember(Name = "joinSplitSig", IsRequired = true, EmitDefaultValue = false)]
        public string JoinSplitSig { get; set; }

        /// <summary>
        /// \&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain.
        /// </summary>
        /// <value>\&quot;Overwinter\&quot; is the network upgrade for the Zcash blockchain.</value>
        [DataMember(Name = "overwintered", IsRequired = true, EmitDefaultValue = true)]
        public bool Overwintered { get; set; }

        /// <summary>
        /// Represents a sequence of JoinSplit descriptions using BCTV14 proofs.
        /// </summary>
        /// <value>Represents a sequence of JoinSplit descriptions using BCTV14 proofs.</value>
        [DataMember(Name = "vJoinSplit", EmitDefaultValue = false)]
        public List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVJoinSplit> VJoinSplit { get; set; }

        /// <summary>
        /// Object Array representation of transaction output descriptions
        /// </summary>
        /// <value>Object Array representation of transaction output descriptions</value>
        [DataMember(Name = "vShieldedOutput", EmitDefaultValue = false)]
        public List<GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput> VShieldedOutput { get; set; }

        /// <summary>
        /// Object Array representation of transaction spend descriptions
        /// </summary>
        /// <value>Object Array representation of transaction spend descriptions</value>
        [DataMember(Name = "vShieldedSpend", IsRequired = true, EmitDefaultValue = false)]
        public List<ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend> VShieldedSpend { get; set; }

        /// <summary>
        /// Defines the transaction value balance.
        /// </summary>
        /// <value>Defines the transaction value balance.</value>
        [DataMember(Name = "valueBalance", IsRequired = true, EmitDefaultValue = false)]
        public string ValueBalance { get; set; }

        /// <summary>
        /// Represents the transaction version group ID.
        /// </summary>
        /// <value>Represents the transaction version group ID.</value>
        [DataMember(Name = "versionGroupId", IsRequired = true, EmitDefaultValue = false)]
        public string VersionGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListUnspentTransactionOutputsByAddressRIBlockchainSpecific {\n");
            sb.Append("  VSize: ").Append(VSize).Append("\n");
            sb.Append("  BindingSig: ").Append(BindingSig).Append("\n");
            sb.Append("  ExpiryHeight: ").Append(ExpiryHeight).Append("\n");
            sb.Append("  JoinSplitPubKey: ").Append(JoinSplitPubKey).Append("\n");
            sb.Append("  JoinSplitSig: ").Append(JoinSplitSig).Append("\n");
            sb.Append("  Overwintered: ").Append(Overwintered).Append("\n");
            sb.Append("  VJoinSplit: ").Append(VJoinSplit).Append("\n");
            sb.Append("  VShieldedOutput: ").Append(VShieldedOutput).Append("\n");
            sb.Append("  VShieldedSpend: ").Append(VShieldedSpend).Append("\n");
            sb.Append("  ValueBalance: ").Append(ValueBalance).Append("\n");
            sb.Append("  VersionGroupId: ").Append(VersionGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListUnspentTransactionOutputsByAddressRIBlockchainSpecific);
        }

        /// <summary>
        /// Returns true if ListUnspentTransactionOutputsByAddressRIBlockchainSpecific instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUnspentTransactionOutputsByAddressRIBlockchainSpecific to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUnspentTransactionOutputsByAddressRIBlockchainSpecific input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VSize == input.VSize ||
                    this.VSize.Equals(input.VSize)
                ) && 
                (
                    this.BindingSig == input.BindingSig ||
                    (this.BindingSig != null &&
                    this.BindingSig.Equals(input.BindingSig))
                ) && 
                (
                    this.ExpiryHeight == input.ExpiryHeight ||
                    this.ExpiryHeight.Equals(input.ExpiryHeight)
                ) && 
                (
                    this.JoinSplitPubKey == input.JoinSplitPubKey ||
                    (this.JoinSplitPubKey != null &&
                    this.JoinSplitPubKey.Equals(input.JoinSplitPubKey))
                ) && 
                (
                    this.JoinSplitSig == input.JoinSplitSig ||
                    (this.JoinSplitSig != null &&
                    this.JoinSplitSig.Equals(input.JoinSplitSig))
                ) && 
                (
                    this.Overwintered == input.Overwintered ||
                    this.Overwintered.Equals(input.Overwintered)
                ) && 
                (
                    this.VJoinSplit == input.VJoinSplit ||
                    this.VJoinSplit != null &&
                    input.VJoinSplit != null &&
                    this.VJoinSplit.SequenceEqual(input.VJoinSplit)
                ) && 
                (
                    this.VShieldedOutput == input.VShieldedOutput ||
                    this.VShieldedOutput != null &&
                    input.VShieldedOutput != null &&
                    this.VShieldedOutput.SequenceEqual(input.VShieldedOutput)
                ) && 
                (
                    this.VShieldedSpend == input.VShieldedSpend ||
                    this.VShieldedSpend != null &&
                    input.VShieldedSpend != null &&
                    this.VShieldedSpend.SequenceEqual(input.VShieldedSpend)
                ) && 
                (
                    this.ValueBalance == input.ValueBalance ||
                    (this.ValueBalance != null &&
                    this.ValueBalance.Equals(input.ValueBalance))
                ) && 
                (
                    this.VersionGroupId == input.VersionGroupId ||
                    (this.VersionGroupId != null &&
                    this.VersionGroupId.Equals(input.VersionGroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VSize.GetHashCode();
                if (this.BindingSig != null)
                {
                    hashCode = (hashCode * 59) + this.BindingSig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiryHeight.GetHashCode();
                if (this.JoinSplitPubKey != null)
                {
                    hashCode = (hashCode * 59) + this.JoinSplitPubKey.GetHashCode();
                }
                if (this.JoinSplitSig != null)
                {
                    hashCode = (hashCode * 59) + this.JoinSplitSig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Overwintered.GetHashCode();
                if (this.VJoinSplit != null)
                {
                    hashCode = (hashCode * 59) + this.VJoinSplit.GetHashCode();
                }
                if (this.VShieldedOutput != null)
                {
                    hashCode = (hashCode * 59) + this.VShieldedOutput.GetHashCode();
                }
                if (this.VShieldedSpend != null)
                {
                    hashCode = (hashCode * 59) + this.VShieldedSpend.GetHashCode();
                }
                if (this.ValueBalance != null)
                {
                    hashCode = (hashCode * 59) + this.ValueBalance.GetHashCode();
                }
                if (this.VersionGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionGroupId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
