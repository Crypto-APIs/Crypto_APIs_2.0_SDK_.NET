/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI
    /// </summary>
    [DataContract(Name = "PrepareAnAccount-BasedTransactionFromHDWalletXPubYPubZPubRI")]
    public partial class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI : IEquatable<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI>, IValidatableObject
    {
        /// <summary>
        /// Representation of the transaction type
        /// </summary>
        /// <value>Representation of the transaction type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum LegacyTransaction for value: legacy-transaction
            /// </summary>
            [EnumMember(Value = "legacy-transaction")]
            LegacyTransaction = 1

        }


        /// <summary>
        /// Representation of the transaction type
        /// </summary>
        /// <value>Representation of the transaction type</value>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = false)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI" /> class.
        /// </summary>
        /// <param name="amount">Representation of the amount of the transaction (required).</param>
        /// <param name="dataHex">Representation of the data in hex value (required).</param>
        /// <param name="derivationIndex">Representation of the derivation index of the xpub address (required).</param>
        /// <param name="fee">fee (required).</param>
        /// <param name="nonce">Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address. (required).</param>
        /// <param name="recipient">Represents a recipient addresses. In account-based protocols like Ethereum there is only one address in this list. (required).</param>
        /// <param name="sender">Represents a sender address. In account-based protocols like Ethereum there is only one address in this list. (required).</param>
        /// <param name="sigHash">Representation of the hash that should be signed. (required).</param>
        /// <param name="transactionType">Representation of the transaction type (required).</param>
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI(string amount = default(string), string dataHex = default(string), long derivationIndex = default(long), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee fee = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee), string nonce = default(string), string recipient = default(string), string sender = default(string), string sigHash = default(string), TransactionTypeEnum transactionType = default(TransactionTypeEnum))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Amount = amount;
            // to ensure "dataHex" is required (not null)
            if (dataHex == null)
            {
                throw new ArgumentNullException("dataHex is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.DataHex = dataHex;
            this.DerivationIndex = derivationIndex;
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Fee = fee;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new ArgumentNullException("recipient is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Recipient = recipient;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.Sender = sender;
            // to ensure "sigHash" is required (not null)
            if (sigHash == null)
            {
                throw new ArgumentNullException("sigHash is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI and cannot be null");
            }
            this.SigHash = sigHash;
            this.TransactionType = transactionType;
        }

        /// <summary>
        /// Representation of the amount of the transaction
        /// </summary>
        /// <value>Representation of the amount of the transaction</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Representation of the data in hex value
        /// </summary>
        /// <value>Representation of the data in hex value</value>
        [DataMember(Name = "dataHex", IsRequired = true, EmitDefaultValue = false)]
        public string DataHex { get; set; }

        /// <summary>
        /// Representation of the derivation index of the xpub address
        /// </summary>
        /// <value>Representation of the derivation index of the xpub address</value>
        [DataMember(Name = "derivationIndex", IsRequired = true, EmitDefaultValue = false)]
        public long DerivationIndex { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee Fee { get; set; }

        /// <summary>
        /// Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address.
        /// </summary>
        /// <value>Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Represents a recipient addresses. In account-based protocols like Ethereum there is only one address in this list.
        /// </summary>
        /// <value>Represents a recipient addresses. In account-based protocols like Ethereum there is only one address in this list.</value>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Represents a sender address. In account-based protocols like Ethereum there is only one address in this list.
        /// </summary>
        /// <value>Represents a sender address. In account-based protocols like Ethereum there is only one address in this list.</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = false)]
        public string Sender { get; set; }

        /// <summary>
        /// Representation of the hash that should be signed.
        /// </summary>
        /// <value>Representation of the hash that should be signed.</value>
        [DataMember(Name = "sigHash", IsRequired = true, EmitDefaultValue = false)]
        public string SigHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DataHex: ").Append(DataHex).Append("\n");
            sb.Append("  DerivationIndex: ").Append(DerivationIndex).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  SigHash: ").Append(SigHash).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI);
        }

        /// <summary>
        /// Returns true if PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.DataHex == input.DataHex ||
                    (this.DataHex != null &&
                    this.DataHex.Equals(input.DataHex))
                ) && 
                (
                    this.DerivationIndex == input.DerivationIndex ||
                    this.DerivationIndex.Equals(input.DerivationIndex)
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.SigHash == input.SigHash ||
                    (this.SigHash != null &&
                    this.SigHash.Equals(input.SigHash))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.DataHex != null)
                {
                    hashCode = (hashCode * 59) + this.DataHex.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DerivationIndex.GetHashCode();
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.SigHash != null)
                {
                    hashCode = (hashCode * 59) + this.SigHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
