/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Tron
    /// </summary>
    [DataContract(Name = "GetWalletTransactionDetailsByTransactionIDRIBST")]
    public partial class GetWalletTransactionDetailsByTransactionIDRIBST : IEquatable<GetWalletTransactionDetailsByTransactionIDRIBST>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBST" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetWalletTransactionDetailsByTransactionIDRIBST() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBST" /> class.
        /// </summary>
        /// <param name="amount">String representation of the amount value (required).</param>
        /// <param name="bandwidthUsed">Numeric representation of the transaction used bandwidth (required).</param>
        /// <param name="contract">Numeric representation of the transaction contract (required).</param>
        /// <param name="energyUsed">String representation of the transaction used energy (required).</param>
        /// <param name="hasInternalTransactions">hasInternalTransactions (required).</param>
        /// <param name="hasTokenTransfers">hasTokenTransfers (required).</param>
        /// <param name="input">Numeric representation of the transaction input (required).</param>
        /// <param name="status">String representation of the transaction status (required).</param>
        public GetWalletTransactionDetailsByTransactionIDRIBST(string amount = default(string), string bandwidthUsed = default(string), string contract = default(string), string energyUsed = default(string), bool hasInternalTransactions = default(bool), bool hasTokenTransfers = default(bool), string input = default(string), string status = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.Amount = amount;
            // to ensure "bandwidthUsed" is required (not null)
            if (bandwidthUsed == null)
            {
                throw new ArgumentNullException("bandwidthUsed is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.BandwidthUsed = bandwidthUsed;
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new ArgumentNullException("contract is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.Contract = contract;
            // to ensure "energyUsed" is required (not null)
            if (energyUsed == null)
            {
                throw new ArgumentNullException("energyUsed is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.EnergyUsed = energyUsed;
            this.HasInternalTransactions = hasInternalTransactions;
            this.HasTokenTransfers = hasTokenTransfers;
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new ArgumentNullException("input is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.Input = input;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for GetWalletTransactionDetailsByTransactionIDRIBST and cannot be null");
            }
            this.Status = status;
        }

        /// <summary>
        /// String representation of the amount value
        /// </summary>
        /// <value>String representation of the amount value</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Numeric representation of the transaction used bandwidth
        /// </summary>
        /// <value>Numeric representation of the transaction used bandwidth</value>
        [DataMember(Name = "bandwidthUsed", IsRequired = true, EmitDefaultValue = false)]
        public string BandwidthUsed { get; set; }

        /// <summary>
        /// Numeric representation of the transaction contract
        /// </summary>
        /// <value>Numeric representation of the transaction contract</value>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = false)]
        public string Contract { get; set; }

        /// <summary>
        /// String representation of the transaction used energy
        /// </summary>
        /// <value>String representation of the transaction used energy</value>
        [DataMember(Name = "energyUsed", IsRequired = true, EmitDefaultValue = false)]
        public string EnergyUsed { get; set; }

        /// <summary>
        /// Gets or Sets HasInternalTransactions
        /// </summary>
        [DataMember(Name = "hasInternalTransactions", IsRequired = true, EmitDefaultValue = true)]
        public bool HasInternalTransactions { get; set; }

        /// <summary>
        /// Gets or Sets HasTokenTransfers
        /// </summary>
        [DataMember(Name = "hasTokenTransfers", IsRequired = true, EmitDefaultValue = true)]
        public bool HasTokenTransfers { get; set; }

        /// <summary>
        /// Numeric representation of the transaction input
        /// </summary>
        /// <value>Numeric representation of the transaction input</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// String representation of the transaction status
        /// </summary>
        /// <value>String representation of the transaction status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWalletTransactionDetailsByTransactionIDRIBST {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BandwidthUsed: ").Append(BandwidthUsed).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  EnergyUsed: ").Append(EnergyUsed).Append("\n");
            sb.Append("  HasInternalTransactions: ").Append(HasInternalTransactions).Append("\n");
            sb.Append("  HasTokenTransfers: ").Append(HasTokenTransfers).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWalletTransactionDetailsByTransactionIDRIBST);
        }

        /// <summary>
        /// Returns true if GetWalletTransactionDetailsByTransactionIDRIBST instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWalletTransactionDetailsByTransactionIDRIBST to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWalletTransactionDetailsByTransactionIDRIBST input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BandwidthUsed == input.BandwidthUsed ||
                    (this.BandwidthUsed != null &&
                    this.BandwidthUsed.Equals(input.BandwidthUsed))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.EnergyUsed == input.EnergyUsed ||
                    (this.EnergyUsed != null &&
                    this.EnergyUsed.Equals(input.EnergyUsed))
                ) && 
                (
                    this.HasInternalTransactions == input.HasInternalTransactions ||
                    this.HasInternalTransactions.Equals(input.HasInternalTransactions)
                ) && 
                (
                    this.HasTokenTransfers == input.HasTokenTransfers ||
                    this.HasTokenTransfers.Equals(input.HasTokenTransfers)
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BandwidthUsed != null)
                {
                    hashCode = (hashCode * 59) + this.BandwidthUsed.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                if (this.EnergyUsed != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyUsed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasInternalTransactions.GetHashCode();
                hashCode = (hashCode * 59) + this.HasTokenTransfers.GetHashCode();
                if (this.Input != null)
                {
                    hashCode = (hashCode * 59) + this.Input.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
