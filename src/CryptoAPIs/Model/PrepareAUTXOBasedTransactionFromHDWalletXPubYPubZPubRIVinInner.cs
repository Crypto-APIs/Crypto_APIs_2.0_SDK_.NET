/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner
    /// </summary>
    [DataContract(Name = "PrepareAUTXO_BasedTransactionFromHDWalletXPubYPubZPubRI_vin_inner")]
    public partial class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner : IEquatable<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner" /> class.
        /// </summary>
        /// <param name="address">Representation of the address (required).</param>
        /// <param name="change">Representation of the change value.</param>
        /// <param name="derivationIndex">Representation of the derivation index of the xpub address..</param>
        /// <param name="outputIndex">Representation of the output index (required).</param>
        /// <param name="satoshis">Representation of the satoshis value (required).</param>
        /// <param name="script">Representation of the script string (required).</param>
        /// <param name="sighash">Representation of the hash that should be signed. (required).</param>
        /// <param name="transactionId">Represents the reference transaction identifier. (required).</param>
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner(string address = default(string), long change = default(long), long derivationIndex = default(long), int outputIndex = default(int), long satoshis = default(long), string script = default(string), string sighash = default(string), string transactionId = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner and cannot be null");
            }
            this.Address = address;
            this.OutputIndex = outputIndex;
            this.Satoshis = satoshis;
            // to ensure "script" is required (not null)
            if (script == null)
            {
                throw new ArgumentNullException("script is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner and cannot be null");
            }
            this.Script = script;
            // to ensure "sighash" is required (not null)
            if (sighash == null)
            {
                throw new ArgumentNullException("sighash is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner and cannot be null");
            }
            this.Sighash = sighash;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner and cannot be null");
            }
            this.TransactionId = transactionId;
            this.Change = change;
            this.DerivationIndex = derivationIndex;
        }

        /// <summary>
        /// Representation of the address
        /// </summary>
        /// <value>Representation of the address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Representation of the change value
        /// </summary>
        /// <value>Representation of the change value</value>
        [DataMember(Name = "change", EmitDefaultValue = false)]
        public long Change { get; set; }

        /// <summary>
        /// Representation of the derivation index of the xpub address.
        /// </summary>
        /// <value>Representation of the derivation index of the xpub address.</value>
        [DataMember(Name = "derivationIndex", EmitDefaultValue = false)]
        public long DerivationIndex { get; set; }

        /// <summary>
        /// Representation of the output index
        /// </summary>
        /// <value>Representation of the output index</value>
        [DataMember(Name = "outputIndex", IsRequired = true, EmitDefaultValue = false)]
        public int OutputIndex { get; set; }

        /// <summary>
        /// Representation of the satoshis value
        /// </summary>
        /// <value>Representation of the satoshis value</value>
        [DataMember(Name = "satoshis", IsRequired = true, EmitDefaultValue = false)]
        public long Satoshis { get; set; }

        /// <summary>
        /// Representation of the script string
        /// </summary>
        /// <value>Representation of the script string</value>
        [DataMember(Name = "script", IsRequired = true, EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Representation of the hash that should be signed.
        /// </summary>
        /// <value>Representation of the hash that should be signed.</value>
        [DataMember(Name = "sighash", IsRequired = true, EmitDefaultValue = false)]
        public string Sighash { get; set; }

        /// <summary>
        /// Represents the reference transaction identifier.
        /// </summary>
        /// <value>Represents the reference transaction identifier.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  DerivationIndex: ").Append(DerivationIndex).Append("\n");
            sb.Append("  OutputIndex: ").Append(OutputIndex).Append("\n");
            sb.Append("  Satoshis: ").Append(Satoshis).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Sighash: ").Append(Sighash).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner);
        }

        /// <summary>
        /// Returns true if PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Change == input.Change ||
                    this.Change.Equals(input.Change)
                ) && 
                (
                    this.DerivationIndex == input.DerivationIndex ||
                    this.DerivationIndex.Equals(input.DerivationIndex)
                ) && 
                (
                    this.OutputIndex == input.OutputIndex ||
                    this.OutputIndex.Equals(input.OutputIndex)
                ) && 
                (
                    this.Satoshis == input.Satoshis ||
                    this.Satoshis.Equals(input.Satoshis)
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                ) && 
                (
                    this.Sighash == input.Sighash ||
                    (this.Sighash != null &&
                    this.Sighash.Equals(input.Sighash))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Change.GetHashCode();
                hashCode = (hashCode * 59) + this.DerivationIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.OutputIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Satoshis.GetHashCode();
                if (this.Script != null)
                {
                    hashCode = (hashCode * 59) + this.Script.GetHashCode();
                }
                if (this.Sighash != null)
                {
                    hashCode = (hashCode * 59) + this.Sighash.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
