/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GenerateAddressRI
    /// </summary>
    [DataContract(Name = "GenerateAddressRI")]
    public partial class GenerateAddressRI : IEquatable<GenerateAddressRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateAddressRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateAddressRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateAddressRI" /> class.
        /// </summary>
        /// <param name="addresses">addresses (required).</param>
        /// <param name="privateKey">Represents the privately known secret key used for authentication and encryption of the address. (required).</param>
        /// <param name="publicKey">Represents the publicly known key used for identification of the address. (required).</param>
        /// <param name="wif">Represents the Wallet Import Format which dictates the encoding that allows the copy of the private ECDSA key easily. (required).</param>
        public GenerateAddressRI(List<GenerateAddressRIAddresses> addresses = default(List<GenerateAddressRIAddresses>), string privateKey = default(string), string publicKey = default(string), string wif = default(string))
        {
            // to ensure "addresses" is required (not null)
            if (addresses == null) {
                throw new ArgumentNullException("addresses is a required property for GenerateAddressRI and cannot be null");
            }
            this.Addresses = addresses;
            // to ensure "privateKey" is required (not null)
            if (privateKey == null) {
                throw new ArgumentNullException("privateKey is a required property for GenerateAddressRI and cannot be null");
            }
            this.PrivateKey = privateKey;
            // to ensure "publicKey" is required (not null)
            if (publicKey == null) {
                throw new ArgumentNullException("publicKey is a required property for GenerateAddressRI and cannot be null");
            }
            this.PublicKey = publicKey;
            // to ensure "wif" is required (not null)
            if (wif == null) {
                throw new ArgumentNullException("wif is a required property for GenerateAddressRI and cannot be null");
            }
            this.Wif = wif;
        }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = false)]
        public List<GenerateAddressRIAddresses> Addresses { get; set; }

        /// <summary>
        /// Represents the privately known secret key used for authentication and encryption of the address.
        /// </summary>
        /// <value>Represents the privately known secret key used for authentication and encryption of the address.</value>
        [DataMember(Name = "privateKey", IsRequired = true, EmitDefaultValue = false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Represents the publicly known key used for identification of the address.
        /// </summary>
        /// <value>Represents the publicly known key used for identification of the address.</value>
        [DataMember(Name = "publicKey", IsRequired = true, EmitDefaultValue = false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Represents the Wallet Import Format which dictates the encoding that allows the copy of the private ECDSA key easily.
        /// </summary>
        /// <value>Represents the Wallet Import Format which dictates the encoding that allows the copy of the private ECDSA key easily.</value>
        [DataMember(Name = "wif", IsRequired = true, EmitDefaultValue = false)]
        public string Wif { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateAddressRI {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Wif: ").Append(Wif).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateAddressRI);
        }

        /// <summary>
        /// Returns true if GenerateAddressRI instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateAddressRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateAddressRI input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.Wif == input.Wif ||
                    (this.Wif != null &&
                    this.Wif.Equals(input.Wif))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.Wif != null)
                    hashCode = hashCode * 59 + this.Wif.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
