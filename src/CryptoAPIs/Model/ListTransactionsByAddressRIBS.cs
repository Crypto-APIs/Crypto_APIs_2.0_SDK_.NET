/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListTransactionsByAddressRIBS
    /// </summary>
    [JsonConverter(typeof(ListTransactionsByAddressRIBSJsonConverter))]
    [DataContract(Name = "ListTransactionsByAddressRIBS")]
    public partial class ListTransactionsByAddressRIBS : AbstractOpenAPISchema, IEquatable<ListTransactionsByAddressRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSB.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSBC.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSD.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSD2.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSE.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSEC.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListTransactionsByAddressRIBS" /> class
        /// with the <see cref="ListTransactionsByAddressRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ListTransactionsByAddressRIBSL.</param>
        public ListTransactionsByAddressRIBS(ListTransactionsByAddressRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ListTransactionsByAddressRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ListTransactionsByAddressRIBSL))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ListTransactionsByAddressRIBSB, ListTransactionsByAddressRIBSBC, ListTransactionsByAddressRIBSD, ListTransactionsByAddressRIBSD2, ListTransactionsByAddressRIBSE, ListTransactionsByAddressRIBSEC, ListTransactionsByAddressRIBSL");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSB`. If the actual instanct is not `ListTransactionsByAddressRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSB</returns>
        public ListTransactionsByAddressRIBSB GetListTransactionsByAddressRIBSB()
        {
            return (ListTransactionsByAddressRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSBC`. If the actual instanct is not `ListTransactionsByAddressRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSBC</returns>
        public ListTransactionsByAddressRIBSBC GetListTransactionsByAddressRIBSBC()
        {
            return (ListTransactionsByAddressRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSD`. If the actual instanct is not `ListTransactionsByAddressRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSD</returns>
        public ListTransactionsByAddressRIBSD GetListTransactionsByAddressRIBSD()
        {
            return (ListTransactionsByAddressRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSD2`. If the actual instanct is not `ListTransactionsByAddressRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSD2</returns>
        public ListTransactionsByAddressRIBSD2 GetListTransactionsByAddressRIBSD2()
        {
            return (ListTransactionsByAddressRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSE`. If the actual instanct is not `ListTransactionsByAddressRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSE</returns>
        public ListTransactionsByAddressRIBSE GetListTransactionsByAddressRIBSE()
        {
            return (ListTransactionsByAddressRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSEC`. If the actual instanct is not `ListTransactionsByAddressRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSEC</returns>
        public ListTransactionsByAddressRIBSEC GetListTransactionsByAddressRIBSEC()
        {
            return (ListTransactionsByAddressRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ListTransactionsByAddressRIBSL`. If the actual instanct is not `ListTransactionsByAddressRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ListTransactionsByAddressRIBSL</returns>
        public ListTransactionsByAddressRIBSL GetListTransactionsByAddressRIBSL()
        {
            return (ListTransactionsByAddressRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListTransactionsByAddressRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ListTransactionsByAddressRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ListTransactionsByAddressRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ListTransactionsByAddressRIBS</returns>
        public static ListTransactionsByAddressRIBS FromJson(string jsonString)
        {
            ListTransactionsByAddressRIBS newListTransactionsByAddressRIBS = null;

            if (jsonString == null)
            {
                return newListTransactionsByAddressRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSB>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSB>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSBC>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSBC>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSD>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSD>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSD2>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSD2>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSE>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSE>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSEC>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSEC>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ListTransactionsByAddressRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSL>(jsonString, ListTransactionsByAddressRIBS.SerializerSettings));
                }
                else
                {
                    newListTransactionsByAddressRIBS = new ListTransactionsByAddressRIBS(JsonConvert.DeserializeObject<ListTransactionsByAddressRIBSL>(jsonString, ListTransactionsByAddressRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ListTransactionsByAddressRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ListTransactionsByAddressRIBSL: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newListTransactionsByAddressRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListTransactionsByAddressRIBS);
        }

        /// <summary>
        /// Returns true if ListTransactionsByAddressRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of ListTransactionsByAddressRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListTransactionsByAddressRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ListTransactionsByAddressRIBS
    /// </summary>
    public class ListTransactionsByAddressRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ListTransactionsByAddressRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ListTransactionsByAddressRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
