/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner
    /// </summary>
    [DataContract(Name = "PrepareAUTXO_BasedTransactionFromHDWalletXPubYPubZPubRI_vout_inner")]
    public partial class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner : IEquatable<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner" /> class.
        /// </summary>
        /// <param name="address">Representation of the address (required).</param>
        /// <param name="satoshis">Representation of the satoshis value (required).</param>
        /// <param name="script">Representation of the script (required).</param>
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner(string address = default(string), long satoshis = default(long), string script = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner and cannot be null");
            }
            this.Address = address;
            this.Satoshis = satoshis;
            // to ensure "script" is required (not null)
            if (script == null)
            {
                throw new ArgumentNullException("script is a required property for PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner and cannot be null");
            }
            this.Script = script;
        }

        /// <summary>
        /// Representation of the address
        /// </summary>
        /// <value>Representation of the address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Representation of the satoshis value
        /// </summary>
        /// <value>Representation of the satoshis value</value>
        [DataMember(Name = "satoshis", IsRequired = true, EmitDefaultValue = false)]
        public long Satoshis { get; set; }

        /// <summary>
        /// Representation of the script
        /// </summary>
        /// <value>Representation of the script</value>
        [DataMember(Name = "script", IsRequired = true, EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Satoshis: ").Append(Satoshis).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner);
        }

        /// <summary>
        /// Returns true if PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Satoshis == input.Satoshis ||
                    this.Satoshis.Equals(input.Satoshis)
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Satoshis.GetHashCode();
                if (this.Script != null)
                {
                    hashCode = (hashCode * 59) + this.Script.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
