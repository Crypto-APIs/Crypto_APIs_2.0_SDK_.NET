/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// DecodeRawTransactionHexRI
    /// </summary>
    [DataContract(Name = "DecodeRawTransactionHexRI")]
    public partial class DecodeRawTransactionHexRI : IEquatable<DecodeRawTransactionHexRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecodeRawTransactionHexRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRI" /> class.
        /// </summary>
        /// <param name="blockchainSpeficicData">blockchainSpeficicData (required).</param>
        /// <param name="size">Represents the total size of this transaction. (required).</param>
        /// <param name="transactionId">Represents the decoded transaction hex. (required).</param>
        public DecodeRawTransactionHexRI(DecodeRawTransactionHexRIS blockchainSpeficicData = default(DecodeRawTransactionHexRIS), int size = default(int), string transactionId = default(string))
        {
            // to ensure "blockchainSpeficicData" is required (not null)
            if (blockchainSpeficicData == null)
            {
                throw new ArgumentNullException("blockchainSpeficicData is a required property for DecodeRawTransactionHexRI and cannot be null");
            }
            this.BlockchainSpeficicData = blockchainSpeficicData;
            this.Size = size;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for DecodeRawTransactionHexRI and cannot be null");
            }
            this.TransactionId = transactionId;
        }

        /// <summary>
        /// Gets or Sets BlockchainSpeficicData
        /// </summary>
        [DataMember(Name = "blockchainSpeficicData", IsRequired = true, EmitDefaultValue = false)]
        public DecodeRawTransactionHexRIS BlockchainSpeficicData { get; set; }

        /// <summary>
        /// Represents the total size of this transaction.
        /// </summary>
        /// <value>Represents the total size of this transaction.</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Represents the decoded transaction hex.
        /// </summary>
        /// <value>Represents the decoded transaction hex.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecodeRawTransactionHexRI {\n");
            sb.Append("  BlockchainSpeficicData: ").Append(BlockchainSpeficicData).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecodeRawTransactionHexRI);
        }

        /// <summary>
        /// Returns true if DecodeRawTransactionHexRI instances are equal
        /// </summary>
        /// <param name="input">Instance of DecodeRawTransactionHexRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecodeRawTransactionHexRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockchainSpeficicData == input.BlockchainSpeficicData ||
                    (this.BlockchainSpeficicData != null &&
                    this.BlockchainSpeficicData.Equals(input.BlockchainSpeficicData))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockchainSpeficicData != null)
                {
                    hashCode = (hashCode * 59) + this.BlockchainSpeficicData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
