/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GetBlockDetailsByBlockHeightFromCallbackRIBS
    /// </summary>
    [JsonConverter(typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSJsonConverter))]
    [DataContract(Name = "GetBlockDetailsByBlockHeightFromCallbackRIBS")]
    public partial class GetBlockDetailsByBlockHeightFromCallbackRIBS : AbstractOpenAPISchema, IEquatable<GetBlockDetailsByBlockHeightFromCallbackRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSB.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSBC.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSL.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSD.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSD2.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSE.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSBSC.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSEC.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSZ.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSX" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSX.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSX actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSZ2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSZ2.</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSX))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSZ))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSZ2))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSB`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSB</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSB GetGetBlockDetailsByBlockHeightFromCallbackRIBSB()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSBC</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSBC GetGetBlockDetailsByBlockHeightFromCallbackRIBSBC()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSL`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSL</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSL GetGetBlockDetailsByBlockHeightFromCallbackRIBSL()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSD</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSD GetGetBlockDetailsByBlockHeightFromCallbackRIBSD()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSD2</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSD2 GetGetBlockDetailsByBlockHeightFromCallbackRIBSD2()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSE`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSE</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSE GetGetBlockDetailsByBlockHeightFromCallbackRIBSE()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSBSC</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSBSC GetGetBlockDetailsByBlockHeightFromCallbackRIBSBSC()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSEC</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSEC GetGetBlockDetailsByBlockHeightFromCallbackRIBSEC()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSZ</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSZ GetGetBlockDetailsByBlockHeightFromCallbackRIBSZ()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSX`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSX`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSX</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSX GetGetBlockDetailsByBlockHeightFromCallbackRIBSX()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSX)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBSZ2</returns>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 GetGetBlockDetailsByBlockHeightFromCallbackRIBSZ2()
        {
            return (GetBlockDetailsByBlockHeightFromCallbackRIBSZ2)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetBlockDetailsByBlockHeightFromCallbackRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetBlockDetailsByBlockHeightFromCallbackRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetBlockDetailsByBlockHeightFromCallbackRIBS</returns>
        public static GetBlockDetailsByBlockHeightFromCallbackRIBS FromJson(string jsonString)
        {
            GetBlockDetailsByBlockHeightFromCallbackRIBS newGetBlockDetailsByBlockHeightFromCallbackRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetBlockDetailsByBlockHeightFromCallbackRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSB>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSB>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSBC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSBC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSBSC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSBSC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSD>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSD>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSD2>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSD2>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSE>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSE>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSEC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSEC>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSL>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSL>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSX).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSX>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSX>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSX");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSX: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSZ>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSZ>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSZ: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightFromCallbackRIBSZ2).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSZ2>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightFromCallbackRIBS = new GetBlockDetailsByBlockHeightFromCallbackRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightFromCallbackRIBSZ2>(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightFromCallbackRIBSZ2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightFromCallbackRIBSZ2: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetBlockDetailsByBlockHeightFromCallbackRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBlockDetailsByBlockHeightFromCallbackRIBS);
        }

        /// <summary>
        /// Returns true if GetBlockDetailsByBlockHeightFromCallbackRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBlockDetailsByBlockHeightFromCallbackRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBlockDetailsByBlockHeightFromCallbackRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetBlockDetailsByBlockHeightFromCallbackRIBS
    /// </summary>
    public class GetBlockDetailsByBlockHeightFromCallbackRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetBlockDetailsByBlockHeightFromCallbackRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetBlockDetailsByBlockHeightFromCallbackRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
