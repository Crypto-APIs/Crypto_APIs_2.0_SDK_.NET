/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
    /// </summary>
    [DataContract(Name = "PrepareAnAccount_BasedTransactionFromHDWalletXPubYPubZPubRB_data_item")]
    public partial class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem : IEquatable<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem>, IValidatableObject
    {
        /// <summary>
        /// Representation of the transaction type
        /// </summary>
        /// <value>Representation of the transaction type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum LegacyTransaction for value: legacy-transaction
            /// </summary>
            [EnumMember(Value = "legacy-transaction")]
            LegacyTransaction = 1,

            /// <summary>
            /// Enum AccessListTransaction for value: access-list-transaction
            /// </summary>
            [EnumMember(Value = "access-list-transaction")]
            AccessListTransaction = 2,

            /// <summary>
            /// Enum GasFeeMarketTransaction for value: gas-fee-market-transaction
            /// </summary>
            [EnumMember(Value = "gas-fee-market-transaction")]
            GasFeeMarketTransaction = 3

        }


        /// <summary>
        /// Representation of the transaction type
        /// </summary>
        /// <value>Representation of the transaction type</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem" /> class.
        /// </summary>
        /// <param name="additionalData">Representation of the additional data..</param>
        /// <param name="amount">Representation of the amount of the transaction (required).</param>
        /// <param name="fee">fee (required).</param>
        /// <param name="nonce">Representation of the nonce value.</param>
        /// <param name="recipient">Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list. (required).</param>
        /// <param name="sender">Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list. (required).</param>
        /// <param name="transactionType">Representation of the transaction type.</param>
        /// <param name="xpub">Defines the account extended publicly known key which is used to derive all child public keys. (required).</param>
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem(string additionalData = default(string), string amount = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee), string nonce = default(string), string recipient = default(string), string sender = default(string), TransactionTypeEnum? transactionType = default(TransactionTypeEnum?), string xpub = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Amount = amount;
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Fee = fee;
            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new ArgumentNullException("recipient is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Recipient = recipient;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Sender = sender;
            // to ensure "xpub" is required (not null)
            if (xpub == null)
            {
                throw new ArgumentNullException("xpub is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem and cannot be null");
            }
            this.Xpub = xpub;
            this.AdditionalData = additionalData;
            this.Nonce = nonce;
            this.TransactionType = transactionType;
        }

        /// <summary>
        /// Representation of the additional data.
        /// </summary>
        /// <value>Representation of the additional data.</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// Representation of the amount of the transaction
        /// </summary>
        /// <value>Representation of the amount of the transaction</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee Fee { get; set; }

        /// <summary>
        /// Representation of the nonce value
        /// </summary>
        /// <value>Representation of the nonce value</value>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
        /// </summary>
        /// <value>Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.</value>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.
        /// </summary>
        /// <value>Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = false)]
        public string Sender { get; set; }

        /// <summary>
        /// Defines the account extended publicly known key which is used to derive all child public keys.
        /// </summary>
        /// <value>Defines the account extended publicly known key which is used to derive all child public keys.</value>
        [DataMember(Name = "xpub", IsRequired = true, EmitDefaultValue = false)]
        public string Xpub { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Xpub: ").Append(Xpub).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem);
        }

        /// <summary>
        /// Returns true if PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.Xpub == input.Xpub ||
                    (this.Xpub != null &&
                    this.Xpub.Equals(input.Xpub))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                if (this.Xpub != null)
                {
                    hashCode = (hashCode * 59) + this.Xpub.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
