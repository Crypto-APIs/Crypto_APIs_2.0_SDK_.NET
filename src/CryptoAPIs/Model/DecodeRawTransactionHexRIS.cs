/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// Represents the specific transaction data according to the blockchain
    /// </summary>
    [JsonConverter(typeof(DecodeRawTransactionHexRISJsonConverter))]
    [DataContract(Name = "DecodeRawTransactionHexRIS")]
    public partial class DecodeRawTransactionHexRIS : AbstractOpenAPISchema, IEquatable<DecodeRawTransactionHexRIS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISB.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISB2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISB2.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISD.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISD2.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISL.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISE.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISE2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISE2.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISE2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISB22" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISB22.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB22 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRIS" /> class
        /// with the <see cref="DecodeRawTransactionHexRISZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DecodeRawTransactionHexRISZ.</param>
        public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DecodeRawTransactionHexRISB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISB2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISB22))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISE2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DecodeRawTransactionHexRISZ))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISB`. If the actual instance is not `DecodeRawTransactionHexRISB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISB</returns>
        public DecodeRawTransactionHexRISB GetDecodeRawTransactionHexRISB()
        {
            return (DecodeRawTransactionHexRISB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISB2`. If the actual instance is not `DecodeRawTransactionHexRISB2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISB2</returns>
        public DecodeRawTransactionHexRISB2 GetDecodeRawTransactionHexRISB2()
        {
            return (DecodeRawTransactionHexRISB2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISD`. If the actual instance is not `DecodeRawTransactionHexRISD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISD</returns>
        public DecodeRawTransactionHexRISD GetDecodeRawTransactionHexRISD()
        {
            return (DecodeRawTransactionHexRISD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISD2`. If the actual instance is not `DecodeRawTransactionHexRISD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISD2</returns>
        public DecodeRawTransactionHexRISD2 GetDecodeRawTransactionHexRISD2()
        {
            return (DecodeRawTransactionHexRISD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISL`. If the actual instance is not `DecodeRawTransactionHexRISL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISL</returns>
        public DecodeRawTransactionHexRISL GetDecodeRawTransactionHexRISL()
        {
            return (DecodeRawTransactionHexRISL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISE`. If the actual instance is not `DecodeRawTransactionHexRISE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISE</returns>
        public DecodeRawTransactionHexRISE GetDecodeRawTransactionHexRISE()
        {
            return (DecodeRawTransactionHexRISE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISE2`. If the actual instance is not `DecodeRawTransactionHexRISE2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISE2</returns>
        public DecodeRawTransactionHexRISE2 GetDecodeRawTransactionHexRISE2()
        {
            return (DecodeRawTransactionHexRISE2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISB22`. If the actual instance is not `DecodeRawTransactionHexRISB22`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISB22</returns>
        public DecodeRawTransactionHexRISB22 GetDecodeRawTransactionHexRISB22()
        {
            return (DecodeRawTransactionHexRISB22)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DecodeRawTransactionHexRISZ`. If the actual instance is not `DecodeRawTransactionHexRISZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DecodeRawTransactionHexRISZ</returns>
        public DecodeRawTransactionHexRISZ GetDecodeRawTransactionHexRISZ()
        {
            return (DecodeRawTransactionHexRISZ)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecodeRawTransactionHexRIS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, DecodeRawTransactionHexRIS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of DecodeRawTransactionHexRIS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of DecodeRawTransactionHexRIS</returns>
        public static DecodeRawTransactionHexRIS FromJson(string jsonString)
        {
            DecodeRawTransactionHexRIS newDecodeRawTransactionHexRIS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newDecodeRawTransactionHexRIS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISB).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISB2).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB2>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB2>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISB2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISB2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISB22).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB22>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISB22>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISB22");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISB22: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISD).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISD>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISD>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISD2).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISD2>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISD2>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISE).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISE>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISE>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISE2).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISE2>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISE2>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISE2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISE2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISL).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISL>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISL>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DecodeRawTransactionHexRISZ).GetProperty("AdditionalProperties") == null)
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISZ>(jsonString, DecodeRawTransactionHexRIS.SerializerSettings));
                }
                else
                {
                    newDecodeRawTransactionHexRIS = new DecodeRawTransactionHexRIS(JsonConvert.DeserializeObject<DecodeRawTransactionHexRISZ>(jsonString, DecodeRawTransactionHexRIS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DecodeRawTransactionHexRISZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DecodeRawTransactionHexRISZ: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newDecodeRawTransactionHexRIS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecodeRawTransactionHexRIS);
        }

        /// <summary>
        /// Returns true if DecodeRawTransactionHexRIS instances are equal
        /// </summary>
        /// <param name="input">Instance of DecodeRawTransactionHexRIS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecodeRawTransactionHexRIS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for DecodeRawTransactionHexRIS
    /// </summary>
    public class DecodeRawTransactionHexRISJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(DecodeRawTransactionHexRIS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return DecodeRawTransactionHexRIS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
