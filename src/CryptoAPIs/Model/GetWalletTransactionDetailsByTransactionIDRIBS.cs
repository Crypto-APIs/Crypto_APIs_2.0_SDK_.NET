/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GetWalletTransactionDetailsByTransactionIDRIBS
    /// </summary>
    [JsonConverter(typeof(GetWalletTransactionDetailsByTransactionIDRIBSJsonConverter))]
    [DataContract(Name = "GetWalletTransactionDetailsByTransactionIDRIBS")]
    public partial class GetWalletTransactionDetailsByTransactionIDRIBS : AbstractOpenAPISchema, IEquatable<GetWalletTransactionDetailsByTransactionIDRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSB.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSE.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSL.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSBC.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSEC.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSD.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSD2.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSZ.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSBSC.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBST" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBST.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBST actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWalletTransactionDetailsByTransactionIDRIBS" /> class
        /// with the <see cref="GetWalletTransactionDetailsByTransactionIDRIBSP" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetWalletTransactionDetailsByTransactionIDRIBSP.</param>
        public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSP actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSP))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBST))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetWalletTransactionDetailsByTransactionIDRIBSZ))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSP, GetWalletTransactionDetailsByTransactionIDRIBST, GetWalletTransactionDetailsByTransactionIDRIBSZ");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSB`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSB</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSB GetGetWalletTransactionDetailsByTransactionIDRIBSB()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSE`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSE</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSE GetGetWalletTransactionDetailsByTransactionIDRIBSE()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSL`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSL</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSL GetGetWalletTransactionDetailsByTransactionIDRIBSL()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSBC</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSBC GetGetWalletTransactionDetailsByTransactionIDRIBSBC()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSEC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSEC</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSEC GetGetWalletTransactionDetailsByTransactionIDRIBSEC()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSD</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSD GetGetWalletTransactionDetailsByTransactionIDRIBSD()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD2`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSD2</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSD2 GetGetWalletTransactionDetailsByTransactionIDRIBSD2()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSZ`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSZ</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSZ GetGetWalletTransactionDetailsByTransactionIDRIBSZ()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBSC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSBSC</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSBSC GetGetWalletTransactionDetailsByTransactionIDRIBSBSC()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBST`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBST`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBST</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBST GetGetWalletTransactionDetailsByTransactionIDRIBST()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBST)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSP`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSP`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBSP</returns>
        public GetWalletTransactionDetailsByTransactionIDRIBSP GetGetWalletTransactionDetailsByTransactionIDRIBSP()
        {
            return (GetWalletTransactionDetailsByTransactionIDRIBSP)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWalletTransactionDetailsByTransactionIDRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetWalletTransactionDetailsByTransactionIDRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetWalletTransactionDetailsByTransactionIDRIBS</returns>
        public static GetWalletTransactionDetailsByTransactionIDRIBS FromJson(string jsonString)
        {
            GetWalletTransactionDetailsByTransactionIDRIBS newGetWalletTransactionDetailsByTransactionIDRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetWalletTransactionDetailsByTransactionIDRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSB>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSB>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSBC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSBC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSBSC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSBSC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSD>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSD>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSD2>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSD2>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSE>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSE>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSEC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSEC>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSL>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSL>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSP).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSP>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSP>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSP");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSP: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBST).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBST>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBST>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBST");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBST: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetWalletTransactionDetailsByTransactionIDRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSZ>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.SerializerSettings));
                }
                else
                {
                    newGetWalletTransactionDetailsByTransactionIDRIBS = new GetWalletTransactionDetailsByTransactionIDRIBS(JsonConvert.DeserializeObject<GetWalletTransactionDetailsByTransactionIDRIBSZ>(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetWalletTransactionDetailsByTransactionIDRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetWalletTransactionDetailsByTransactionIDRIBSZ: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetWalletTransactionDetailsByTransactionIDRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWalletTransactionDetailsByTransactionIDRIBS);
        }

        /// <summary>
        /// Returns true if GetWalletTransactionDetailsByTransactionIDRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWalletTransactionDetailsByTransactionIDRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWalletTransactionDetailsByTransactionIDRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetWalletTransactionDetailsByTransactionIDRIBS
    /// </summary>
    public class GetWalletTransactionDetailsByTransactionIDRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetWalletTransactionDetailsByTransactionIDRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetWalletTransactionDetailsByTransactionIDRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
