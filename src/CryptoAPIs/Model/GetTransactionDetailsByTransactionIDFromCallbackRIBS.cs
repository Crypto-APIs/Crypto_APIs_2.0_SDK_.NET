/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GetTransactionDetailsByTransactionIDFromCallbackRIBS
    /// </summary>
    [JsonConverter(typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSJsonConverter))]
    [DataContract(Name = "GetTransactionDetailsByTransactionIDFromCallbackRIBS")]
    public partial class GetTransactionDetailsByTransactionIDFromCallbackRIBS : AbstractOpenAPISchema, IEquatable<GetTransactionDetailsByTransactionIDFromCallbackRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSB.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSE.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSBC.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSL.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSD.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSD2.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSZ" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSZ.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSEC.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSX" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSX actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBST" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBST.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBST actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBS" /> class
        /// with the <see cref="GetTransactionDetailsByTransactionIDFromCallbackRIBSP" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSP.</param>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSP actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSL))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSP))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBST))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSX))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSB</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSB GetGetTransactionDetailsByTransactionIDFromCallbackRIBSB()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSE</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSE GetGetTransactionDetailsByTransactionIDFromCallbackRIBSE()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSBC</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSBC GetGetTransactionDetailsByTransactionIDFromCallbackRIBSBC()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSL</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSL GetGetTransactionDetailsByTransactionIDFromCallbackRIBSL()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSD</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSD GetGetTransactionDetailsByTransactionIDFromCallbackRIBSD()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSD2</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 GetGetTransactionDetailsByTransactionIDFromCallbackRIBSD2()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSZ</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSZ GetGetTransactionDetailsByTransactionIDFromCallbackRIBSZ()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSEC</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSEC GetGetTransactionDetailsByTransactionIDFromCallbackRIBSEC()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC GetGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 GetGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSX GetGetTransactionDetailsByTransactionIDFromCallbackRIBSX()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSX)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBST`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBST`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBST</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBST GetGetTransactionDetailsByTransactionIDFromCallbackRIBST()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBST)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSP</returns>
        public GetTransactionDetailsByTransactionIDFromCallbackRIBSP GetGetTransactionDetailsByTransactionIDFromCallbackRIBSP()
        {
            return (GetTransactionDetailsByTransactionIDFromCallbackRIBSP)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTransactionDetailsByTransactionIDFromCallbackRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS</returns>
        public static GetTransactionDetailsByTransactionIDFromCallbackRIBS FromJson(string jsonString)
        {
            GetTransactionDetailsByTransactionIDFromCallbackRIBS newGetTransactionDetailsByTransactionIDFromCallbackRIBS = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetTransactionDetailsByTransactionIDFromCallbackRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSB>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSB>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSBC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSBC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSD>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSD>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSD2>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSD2>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSE>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSE>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSEC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSEC>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSL>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSL>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSL: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSP).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSP>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSP>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSP");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSP: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBST).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBST>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBST>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBST");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBST: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSX).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSX>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSX>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSX");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSX: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSZ");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSZ: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2).GetProperty("AdditionalProperties") == null)
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.SerializerSettings));
                }
                else
                {
                    newGetTransactionDetailsByTransactionIDFromCallbackRIBS = new GetTransactionDetailsByTransactionIDFromCallbackRIBS(JsonConvert.DeserializeObject<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2>(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetTransactionDetailsByTransactionIDFromCallbackRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTransactionDetailsByTransactionIDFromCallbackRIBS);
        }

        /// <summary>
        /// Returns true if GetTransactionDetailsByTransactionIDFromCallbackRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTransactionDetailsByTransactionIDFromCallbackRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetTransactionDetailsByTransactionIDFromCallbackRIBS
    /// </summary>
    public class GetTransactionDetailsByTransactionIDFromCallbackRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetTransactionDetailsByTransactionIDFromCallbackRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetTransactionDetailsByTransactionIDFromCallbackRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
