/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;
using System.Reflection;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GetBlockDetailsByBlockHeightRIBS
    /// </summary>
    [JsonConverter(typeof(GetBlockDetailsByBlockHeightRIBSJsonConverter))]
    [DataContract(Name = "GetBlockDetailsByBlockHeightRIBS")]
    public partial class GetBlockDetailsByBlockHeightRIBS : AbstractOpenAPISchema, IEquatable<GetBlockDetailsByBlockHeightRIBS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSB" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSB.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSB actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSBC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSBC.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSBC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSD" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSD.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSD actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSD2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSD2.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSD2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSE" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSE.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSE actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSEC" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSEC.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSEC actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightRIBS" /> class
        /// with the <see cref="GetBlockDetailsByBlockHeightRIBSL" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GetBlockDetailsByBlockHeightRIBSL.</param>
        public GetBlockDetailsByBlockHeightRIBS(GetBlockDetailsByBlockHeightRIBSL actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSB))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSBC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSD))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSD2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSE))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSEC))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GetBlockDetailsByBlockHeightRIBSL))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: GetBlockDetailsByBlockHeightRIBSB, GetBlockDetailsByBlockHeightRIBSBC, GetBlockDetailsByBlockHeightRIBSD, GetBlockDetailsByBlockHeightRIBSD2, GetBlockDetailsByBlockHeightRIBSE, GetBlockDetailsByBlockHeightRIBSEC, GetBlockDetailsByBlockHeightRIBSL");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSB`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSB`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSB</returns>
        public GetBlockDetailsByBlockHeightRIBSB GetGetBlockDetailsByBlockHeightRIBSB()
        {
            return (GetBlockDetailsByBlockHeightRIBSB)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSBC`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSBC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSBC</returns>
        public GetBlockDetailsByBlockHeightRIBSBC GetGetBlockDetailsByBlockHeightRIBSBC()
        {
            return (GetBlockDetailsByBlockHeightRIBSBC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSD`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSD`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSD</returns>
        public GetBlockDetailsByBlockHeightRIBSD GetGetBlockDetailsByBlockHeightRIBSD()
        {
            return (GetBlockDetailsByBlockHeightRIBSD)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSD2`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSD2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSD2</returns>
        public GetBlockDetailsByBlockHeightRIBSD2 GetGetBlockDetailsByBlockHeightRIBSD2()
        {
            return (GetBlockDetailsByBlockHeightRIBSD2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSE`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSE`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSE</returns>
        public GetBlockDetailsByBlockHeightRIBSE GetGetBlockDetailsByBlockHeightRIBSE()
        {
            return (GetBlockDetailsByBlockHeightRIBSE)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSEC`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSEC`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSEC</returns>
        public GetBlockDetailsByBlockHeightRIBSEC GetGetBlockDetailsByBlockHeightRIBSEC()
        {
            return (GetBlockDetailsByBlockHeightRIBSEC)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GetBlockDetailsByBlockHeightRIBSL`. If the actual instanct is not `GetBlockDetailsByBlockHeightRIBSL`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBSL</returns>
        public GetBlockDetailsByBlockHeightRIBSL GetGetBlockDetailsByBlockHeightRIBSL()
        {
            return (GetBlockDetailsByBlockHeightRIBSL)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetBlockDetailsByBlockHeightRIBS {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetBlockDetailsByBlockHeightRIBS.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetBlockDetailsByBlockHeightRIBS
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetBlockDetailsByBlockHeightRIBS</returns>
        public static GetBlockDetailsByBlockHeightRIBS FromJson(string jsonString)
        {
            GetBlockDetailsByBlockHeightRIBS newGetBlockDetailsByBlockHeightRIBS = null;

            if (jsonString == null)
            {
                return newGetBlockDetailsByBlockHeightRIBS;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSB).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSB>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSB>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSB");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSB: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSBC).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSBC>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSBC>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSBC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSBC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSD).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSD>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSD>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSD");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSD: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSD2).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSD2>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSD2>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSD2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSD2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSE).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSE>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSE>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSE");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSE: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSEC).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSEC>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSEC>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSEC");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSEC: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GetBlockDetailsByBlockHeightRIBSL).GetProperty("AdditionalProperties") == null)
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSL>(jsonString, GetBlockDetailsByBlockHeightRIBS.SerializerSettings));
                }
                else
                {
                    newGetBlockDetailsByBlockHeightRIBS = new GetBlockDetailsByBlockHeightRIBS(JsonConvert.DeserializeObject<GetBlockDetailsByBlockHeightRIBSL>(jsonString, GetBlockDetailsByBlockHeightRIBS.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GetBlockDetailsByBlockHeightRIBSL");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(String.Format("Failed to deserialize `{0}` into GetBlockDetailsByBlockHeightRIBSL: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetBlockDetailsByBlockHeightRIBS;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBlockDetailsByBlockHeightRIBS);
        }

        /// <summary>
        /// Returns true if GetBlockDetailsByBlockHeightRIBS instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBlockDetailsByBlockHeightRIBS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBlockDetailsByBlockHeightRIBS input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetBlockDetailsByBlockHeightRIBS
    /// </summary>
    public class GetBlockDetailsByBlockHeightRIBSJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((String)(typeof(GetBlockDetailsByBlockHeightRIBS).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetBlockDetailsByBlockHeightRIBS.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
