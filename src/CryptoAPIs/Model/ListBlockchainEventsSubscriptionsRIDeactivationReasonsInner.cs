/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner
    /// </summary>
    [DataContract(Name = "ListBlockchainEventsSubscriptionsRI_deactivationReasons_inner")]
    public partial class ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner : IEquatable<ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner" /> class.
        /// </summary>
        /// <param name="reason">Defines the deactivation reason as a message. (required).</param>
        /// <param name="timestamp">Represents the time of the subscription deactivation. (required).</param>
        public ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner(string reason = default(string), int timestamp = default(int))
        {
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner and cannot be null");
            }
            this.Reason = reason;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Defines the deactivation reason as a message.
        /// </summary>
        /// <value>Defines the deactivation reason as a message.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Represents the time of the subscription deactivation.
        /// </summary>
        /// <value>Represents the time of the subscription deactivation.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner);
        }

        /// <summary>
        /// Returns true if ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
