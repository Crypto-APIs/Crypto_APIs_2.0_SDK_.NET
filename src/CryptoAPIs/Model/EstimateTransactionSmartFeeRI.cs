/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// EstimateTransactionSmartFeeRI
    /// </summary>
    [DataContract(Name = "EstimateTransactionSmartFeeRI")]
    public partial class EstimateTransactionSmartFeeRI : IEquatable<EstimateTransactionSmartFeeRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateTransactionSmartFeeRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EstimateTransactionSmartFeeRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateTransactionSmartFeeRI" /> class.
        /// </summary>
        /// <param name="confirmationTarget">Represents the confirmation target in blocks (required).</param>
        /// <param name="feeRate">Represents the Fee Rate value. (required).</param>
        /// <param name="unit">Defines the fee unit. (required).</param>
        public EstimateTransactionSmartFeeRI(int confirmationTarget = default(int), string feeRate = default(string), string unit = default(string))
        {
            this.ConfirmationTarget = confirmationTarget;
            // to ensure "feeRate" is required (not null)
            if (feeRate == null)
            {
                throw new ArgumentNullException("feeRate is a required property for EstimateTransactionSmartFeeRI and cannot be null");
            }
            this.FeeRate = feeRate;
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new ArgumentNullException("unit is a required property for EstimateTransactionSmartFeeRI and cannot be null");
            }
            this.Unit = unit;
        }

        /// <summary>
        /// Represents the confirmation target in blocks
        /// </summary>
        /// <value>Represents the confirmation target in blocks</value>
        [DataMember(Name = "confirmationTarget", IsRequired = true, EmitDefaultValue = false)]
        public int ConfirmationTarget { get; set; }

        /// <summary>
        /// Represents the Fee Rate value.
        /// </summary>
        /// <value>Represents the Fee Rate value.</value>
        [DataMember(Name = "feeRate", IsRequired = true, EmitDefaultValue = false)]
        public string FeeRate { get; set; }

        /// <summary>
        /// Defines the fee unit.
        /// </summary>
        /// <value>Defines the fee unit.</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateTransactionSmartFeeRI {\n");
            sb.Append("  ConfirmationTarget: ").Append(ConfirmationTarget).Append("\n");
            sb.Append("  FeeRate: ").Append(FeeRate).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimateTransactionSmartFeeRI);
        }

        /// <summary>
        /// Returns true if EstimateTransactionSmartFeeRI instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimateTransactionSmartFeeRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimateTransactionSmartFeeRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConfirmationTarget == input.ConfirmationTarget ||
                    this.ConfirmationTarget.Equals(input.ConfirmationTarget)
                ) && 
                (
                    this.FeeRate == input.FeeRate ||
                    (this.FeeRate != null &&
                    this.FeeRate.Equals(input.FeeRate))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ConfirmationTarget.GetHashCode();
                if (this.FeeRate != null)
                {
                    hashCode = (hashCode * 59) + this.FeeRate.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
