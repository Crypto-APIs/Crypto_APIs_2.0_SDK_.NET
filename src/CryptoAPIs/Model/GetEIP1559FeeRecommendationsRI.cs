/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// GetEIP1559FeeRecommendationsRI
    /// </summary>
    [DataContract(Name = "GetEIP1559FeeRecommendationsRI")]
    public partial class GetEIP1559FeeRecommendationsRI : IEquatable<GetEIP1559FeeRecommendationsRI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEIP1559FeeRecommendationsRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetEIP1559FeeRecommendationsRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEIP1559FeeRecommendationsRI" /> class.
        /// </summary>
        /// <param name="baseFeePerGas">baseFeePerGas (required).</param>
        /// <param name="maxFeePerGas">maxFeePerGas (required).</param>
        /// <param name="maxPriorityFeePerGas">maxPriorityFeePerGas (required).</param>
        public GetEIP1559FeeRecommendationsRI(GetEIP1559FeeRecommendationsRIBaseFeePerGas baseFeePerGas = default(GetEIP1559FeeRecommendationsRIBaseFeePerGas), GetEIP1559FeeRecommendationsRIMaxFeePerGas maxFeePerGas = default(GetEIP1559FeeRecommendationsRIMaxFeePerGas), GetEIP1559FeeRecommendationsRIMaxPriorityFeePerGas maxPriorityFeePerGas = default(GetEIP1559FeeRecommendationsRIMaxPriorityFeePerGas))
        {
            // to ensure "baseFeePerGas" is required (not null)
            if (baseFeePerGas == null) {
                throw new ArgumentNullException("baseFeePerGas is a required property for GetEIP1559FeeRecommendationsRI and cannot be null");
            }
            this.BaseFeePerGas = baseFeePerGas;
            // to ensure "maxFeePerGas" is required (not null)
            if (maxFeePerGas == null) {
                throw new ArgumentNullException("maxFeePerGas is a required property for GetEIP1559FeeRecommendationsRI and cannot be null");
            }
            this.MaxFeePerGas = maxFeePerGas;
            // to ensure "maxPriorityFeePerGas" is required (not null)
            if (maxPriorityFeePerGas == null) {
                throw new ArgumentNullException("maxPriorityFeePerGas is a required property for GetEIP1559FeeRecommendationsRI and cannot be null");
            }
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
        }

        /// <summary>
        /// Gets or Sets BaseFeePerGas
        /// </summary>
        [DataMember(Name = "baseFeePerGas", IsRequired = true, EmitDefaultValue = false)]
        public GetEIP1559FeeRecommendationsRIBaseFeePerGas BaseFeePerGas { get; set; }

        /// <summary>
        /// Gets or Sets MaxFeePerGas
        /// </summary>
        [DataMember(Name = "maxFeePerGas", IsRequired = true, EmitDefaultValue = false)]
        public GetEIP1559FeeRecommendationsRIMaxFeePerGas MaxFeePerGas { get; set; }

        /// <summary>
        /// Gets or Sets MaxPriorityFeePerGas
        /// </summary>
        [DataMember(Name = "maxPriorityFeePerGas", IsRequired = true, EmitDefaultValue = false)]
        public GetEIP1559FeeRecommendationsRIMaxPriorityFeePerGas MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEIP1559FeeRecommendationsRI {\n");
            sb.Append("  BaseFeePerGas: ").Append(BaseFeePerGas).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetEIP1559FeeRecommendationsRI);
        }

        /// <summary>
        /// Returns true if GetEIP1559FeeRecommendationsRI instances are equal
        /// </summary>
        /// <param name="input">Instance of GetEIP1559FeeRecommendationsRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetEIP1559FeeRecommendationsRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BaseFeePerGas == input.BaseFeePerGas ||
                    (this.BaseFeePerGas != null &&
                    this.BaseFeePerGas.Equals(input.BaseFeePerGas))
                ) && 
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) && 
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.BaseFeePerGas.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
