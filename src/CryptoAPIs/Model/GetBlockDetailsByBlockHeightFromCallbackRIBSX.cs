/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// XRP
    /// </summary>
    [DataContract(Name = "GetBlockDetailsByBlockHeightFromCallbackRIBSX")]
    public partial class GetBlockDetailsByBlockHeightFromCallbackRIBSX : IEquatable<GetBlockDetailsByBlockHeightFromCallbackRIBSX>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSX" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetBlockDetailsByBlockHeightFromCallbackRIBSX() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBlockDetailsByBlockHeightFromCallbackRIBSX" /> class.
        /// </summary>
        /// <param name="totalCoins">totalCoins (required).</param>
        /// <param name="totalFees">totalFees (required).</param>
        public GetBlockDetailsByBlockHeightFromCallbackRIBSX(GetLatestMinedXRPRippleBlockRITotalCoins totalCoins = default(GetLatestMinedXRPRippleBlockRITotalCoins), GetLatestMinedXRPRippleBlockRITotalFees totalFees = default(GetLatestMinedXRPRippleBlockRITotalFees))
        {
            // to ensure "totalCoins" is required (not null)
            if (totalCoins == null) {
                throw new ArgumentNullException("totalCoins is a required property for GetBlockDetailsByBlockHeightFromCallbackRIBSX and cannot be null");
            }
            this.TotalCoins = totalCoins;
            // to ensure "totalFees" is required (not null)
            if (totalFees == null) {
                throw new ArgumentNullException("totalFees is a required property for GetBlockDetailsByBlockHeightFromCallbackRIBSX and cannot be null");
            }
            this.TotalFees = totalFees;
        }

        /// <summary>
        /// Gets or Sets TotalCoins
        /// </summary>
        [DataMember(Name = "totalCoins", IsRequired = true, EmitDefaultValue = false)]
        public GetLatestMinedXRPRippleBlockRITotalCoins TotalCoins { get; set; }

        /// <summary>
        /// Gets or Sets TotalFees
        /// </summary>
        [DataMember(Name = "totalFees", IsRequired = true, EmitDefaultValue = false)]
        public GetLatestMinedXRPRippleBlockRITotalFees TotalFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBlockDetailsByBlockHeightFromCallbackRIBSX {\n");
            sb.Append("  TotalCoins: ").Append(TotalCoins).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBlockDetailsByBlockHeightFromCallbackRIBSX);
        }

        /// <summary>
        /// Returns true if GetBlockDetailsByBlockHeightFromCallbackRIBSX instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBlockDetailsByBlockHeightFromCallbackRIBSX to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBlockDetailsByBlockHeightFromCallbackRIBSX input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalCoins == input.TotalCoins ||
                    (this.TotalCoins != null &&
                    this.TotalCoins.Equals(input.TotalCoins))
                ) && 
                (
                    this.TotalFees == input.TotalFees ||
                    (this.TotalFees != null &&
                    this.TotalFees.Equals(input.TotalFees))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalCoins != null)
                {
                    hashCode = (hashCode * 59) + this.TotalCoins.GetHashCode();
                }
                if (this.TotalFees != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFees.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
