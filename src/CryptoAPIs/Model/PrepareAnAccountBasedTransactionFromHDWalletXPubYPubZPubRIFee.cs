/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.
    /// </summary>
    [DataContract(Name = "PrepareAnAccount_BasedTransactionFromHDWalletXPubYPubZPubRI_fee")]
    public partial class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee : IEquatable<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee" /> class.
        /// </summary>
        /// <param name="gasLimit">Represents the amount of gas used by this specific transaction alone. (required).</param>
        /// <param name="gasPrice">Represents the price offered to the miner to purchase this amount of gas. (required).</param>
        /// <param name="maxFeePerGas">Representation of the max fee per gas value (required).</param>
        /// <param name="maxPriorityFeePerGas">Rrepresentation of the max priority fee per gas value (required).</param>
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee(string gasLimit = default(string), string gasPrice = default(string), string maxFeePerGas = default(string), string maxPriorityFeePerGas = default(string))
        {
            // to ensure "gasLimit" is required (not null)
            if (gasLimit == null)
            {
                throw new ArgumentNullException("gasLimit is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee and cannot be null");
            }
            this.GasLimit = gasLimit;
            // to ensure "gasPrice" is required (not null)
            if (gasPrice == null)
            {
                throw new ArgumentNullException("gasPrice is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee and cannot be null");
            }
            this.GasPrice = gasPrice;
            // to ensure "maxFeePerGas" is required (not null)
            if (maxFeePerGas == null)
            {
                throw new ArgumentNullException("maxFeePerGas is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee and cannot be null");
            }
            this.MaxFeePerGas = maxFeePerGas;
            // to ensure "maxPriorityFeePerGas" is required (not null)
            if (maxPriorityFeePerGas == null)
            {
                throw new ArgumentNullException("maxPriorityFeePerGas is a required property for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee and cannot be null");
            }
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
        }

        /// <summary>
        /// Represents the amount of gas used by this specific transaction alone.
        /// </summary>
        /// <value>Represents the amount of gas used by this specific transaction alone.</value>
        [DataMember(Name = "gasLimit", IsRequired = true, EmitDefaultValue = false)]
        public string GasLimit { get; set; }

        /// <summary>
        /// Represents the price offered to the miner to purchase this amount of gas.
        /// </summary>
        /// <value>Represents the price offered to the miner to purchase this amount of gas.</value>
        [DataMember(Name = "gasPrice", IsRequired = true, EmitDefaultValue = false)]
        public string GasPrice { get; set; }

        /// <summary>
        /// Representation of the max fee per gas value
        /// </summary>
        /// <value>Representation of the max fee per gas value</value>
        [DataMember(Name = "maxFeePerGas", IsRequired = true, EmitDefaultValue = false)]
        public string MaxFeePerGas { get; set; }

        /// <summary>
        /// Rrepresentation of the max priority fee per gas value
        /// </summary>
        /// <value>Rrepresentation of the max priority fee per gas value</value>
        [DataMember(Name = "maxPriorityFeePerGas", IsRequired = true, EmitDefaultValue = false)]
        public string MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee {\n");
            sb.Append("  GasLimit: ").Append(GasLimit).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee);
        }

        /// <summary>
        /// Returns true if PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GasLimit == input.GasLimit ||
                    (this.GasLimit != null &&
                    this.GasLimit.Equals(input.GasLimit))
                ) && 
                (
                    this.GasPrice == input.GasPrice ||
                    (this.GasPrice != null &&
                    this.GasPrice.Equals(input.GasPrice))
                ) && 
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) && 
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.GasLimit.GetHashCode();
                }
                if (this.GasPrice != null)
                {
                    hashCode = (hashCode * 59) + this.GasPrice.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
