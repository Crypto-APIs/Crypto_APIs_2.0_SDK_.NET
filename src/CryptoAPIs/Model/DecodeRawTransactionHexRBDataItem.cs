/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// DecodeRawTransactionHexRBDataItem
    /// </summary>
    [DataContract(Name = "DecodeRawTransactionHexRB_data_item")]
    public partial class DecodeRawTransactionHexRBDataItem : IEquatable<DecodeRawTransactionHexRBDataItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRBDataItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecodeRawTransactionHexRBDataItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeRawTransactionHexRBDataItem" /> class.
        /// </summary>
        /// <param name="rawTransactionHex">Represents the raw transaction Hex that has to be decoded. (required).</param>
        public DecodeRawTransactionHexRBDataItem(string rawTransactionHex = default(string))
        {
            // to ensure "rawTransactionHex" is required (not null)
            if (rawTransactionHex == null)
            {
                throw new ArgumentNullException("rawTransactionHex is a required property for DecodeRawTransactionHexRBDataItem and cannot be null");
            }
            this.RawTransactionHex = rawTransactionHex;
        }

        /// <summary>
        /// Represents the raw transaction Hex that has to be decoded.
        /// </summary>
        /// <value>Represents the raw transaction Hex that has to be decoded.</value>
        [DataMember(Name = "rawTransactionHex", IsRequired = true, EmitDefaultValue = false)]
        public string RawTransactionHex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecodeRawTransactionHexRBDataItem {\n");
            sb.Append("  RawTransactionHex: ").Append(RawTransactionHex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecodeRawTransactionHexRBDataItem);
        }

        /// <summary>
        /// Returns true if DecodeRawTransactionHexRBDataItem instances are equal
        /// </summary>
        /// <param name="input">Instance of DecodeRawTransactionHexRBDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecodeRawTransactionHexRBDataItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RawTransactionHex == input.RawTransactionHex ||
                    (this.RawTransactionHex != null &&
                    this.RawTransactionHex.Equals(input.RawTransactionHex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RawTransactionHex != null)
                {
                    hashCode = (hashCode * 59) + this.RawTransactionHex.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
