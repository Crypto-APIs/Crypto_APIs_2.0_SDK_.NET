/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CryptoAPIs.Client.OpenAPIDateConverter;

namespace CryptoAPIs.Model
{
    /// <summary>
    /// DeriveAndSyncNewChangeAddressesRI
    /// </summary>
    [DataContract(Name = "DeriveAndSyncNewChangeAddressesRI")]
    public partial class DeriveAndSyncNewChangeAddressesRI : IEquatable<DeriveAndSyncNewChangeAddressesRI>, IValidatableObject
    {
        /// <summary>
        /// Defines the address type.
        /// </summary>
        /// <value>Defines the address type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeEnum
        {
            /// <summary>
            /// Enum Change for value: change
            /// </summary>
            [EnumMember(Value = "change")]
            Change = 1

        }


        /// <summary>
        /// Defines the address type.
        /// </summary>
        /// <value>Defines the address type.</value>
        [DataMember(Name = "addressType", IsRequired = true, EmitDefaultValue = false)]
        public AddressTypeEnum AddressType { get; set; }
        /// <summary>
        /// Represents the derivation type.
        /// </summary>
        /// <value>Represents the derivation type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DerivationTypeEnum
        {
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 1,

            /// <summary>
            /// Enum Bip32 for value: bip32
            /// </summary>
            [EnumMember(Value = "bip32")]
            Bip32 = 2

        }


        /// <summary>
        /// Represents the derivation type.
        /// </summary>
        /// <value>Represents the derivation type.</value>
        [DataMember(Name = "derivationType", IsRequired = true, EmitDefaultValue = false)]
        public DerivationTypeEnum DerivationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeriveAndSyncNewChangeAddressesRI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeriveAndSyncNewChangeAddressesRI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeriveAndSyncNewChangeAddressesRI" /> class.
        /// </summary>
        /// <param name="address">Represents the public address, which is a compressed and shortened form of a public key. (required).</param>
        /// <param name="addressFormat">Represents the format of the address. (required).</param>
        /// <param name="addressType">Defines the address type. (required).</param>
        /// <param name="derivationType">Represents the derivation type. (required).</param>
        /// <param name="index">Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout). (required).</param>
        public DeriveAndSyncNewChangeAddressesRI(string address = default(string), string addressFormat = default(string), AddressTypeEnum addressType = default(AddressTypeEnum), DerivationTypeEnum derivationType = default(DerivationTypeEnum), string index = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for DeriveAndSyncNewChangeAddressesRI and cannot be null");
            }
            this.Address = address;
            // to ensure "addressFormat" is required (not null)
            if (addressFormat == null)
            {
                throw new ArgumentNullException("addressFormat is a required property for DeriveAndSyncNewChangeAddressesRI and cannot be null");
            }
            this.AddressFormat = addressFormat;
            this.AddressType = addressType;
            this.DerivationType = derivationType;
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new ArgumentNullException("index is a required property for DeriveAndSyncNewChangeAddressesRI and cannot be null");
            }
            this.Index = index;
        }

        /// <summary>
        /// Represents the public address, which is a compressed and shortened form of a public key.
        /// </summary>
        /// <value>Represents the public address, which is a compressed and shortened form of a public key.</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Represents the format of the address.
        /// </summary>
        /// <value>Represents the format of the address.</value>
        [DataMember(Name = "addressFormat", IsRequired = true, EmitDefaultValue = false)]
        public string AddressFormat { get; set; }

        /// <summary>
        /// Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).
        /// </summary>
        /// <value>Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = false)]
        public string Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeriveAndSyncNewChangeAddressesRI {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  DerivationType: ").Append(DerivationType).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeriveAndSyncNewChangeAddressesRI);
        }

        /// <summary>
        /// Returns true if DeriveAndSyncNewChangeAddressesRI instances are equal
        /// </summary>
        /// <param name="input">Instance of DeriveAndSyncNewChangeAddressesRI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeriveAndSyncNewChangeAddressesRI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AddressFormat == input.AddressFormat ||
                    (this.AddressFormat != null &&
                    this.AddressFormat.Equals(input.AddressFormat))
                ) && 
                (
                    this.AddressType == input.AddressType ||
                    this.AddressType.Equals(input.AddressType)
                ) && 
                (
                    this.DerivationType == input.DerivationType ||
                    this.DerivationType.Equals(input.DerivationType)
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.AddressFormat != null)
                {
                    hashCode = (hashCode * 59) + this.AddressFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressType.GetHashCode();
                hashCode = (hashCode * 59) + this.DerivationType.GetHashCode();
                if (this.Index != null)
                {
                    hashCode = (hashCode * 59) + this.Index.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
