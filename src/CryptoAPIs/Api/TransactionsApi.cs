/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CryptoAPIs.Client;
using CryptoAPIs.Model;

namespace CryptoAPIs.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        CreateCoinsTransactionFromAddressForWholeAmountR CreateCoinsTransactionFromAddressForWholeAmount(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0);

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR> CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0);
        /// <summary>
        /// Create Coins Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionRequestFromAddressR</returns>
        CreateCoinsTransactionRequestFromAddressR CreateCoinsTransactionRequestFromAddress(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0);

        /// <summary>
        /// Create Coins Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionRequestFromAddressR</returns>
        ApiResponse<CreateCoinsTransactionRequestFromAddressR> CreateCoinsTransactionRequestFromAddressWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0);
        /// <summary>
        /// Create Coins Transaction Request from Wallet
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionRequestFromWalletR</returns>
        CreateCoinsTransactionRequestFromWalletR CreateCoinsTransactionRequestFromWallet(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0);

        /// <summary>
        /// Create Coins Transaction Request from Wallet
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionRequestFromWalletR</returns>
        ApiResponse<CreateCoinsTransactionRequestFromWalletR> CreateCoinsTransactionRequestFromWalletWithHttpInfo(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0);
        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0);

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0);
        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFungibleTokensTransactionRequestFromAddressR</returns>
        CreateFungibleTokensTransactionRequestFromAddressR CreateFungibleTokensTransactionRequestFromAddress(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0);

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFungibleTokensTransactionRequestFromAddressR</returns>
        ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR> CreateFungibleTokensTransactionRequestFromAddressWithHttpInfo(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0);
        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        CreateSingleTransactionRequestFromAddressWithoutFeePriorityR CreateSingleTransactionRequestFromAddressWithoutFeePriority(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0);

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        System.Threading.Tasks.Task<CreateCoinsTransactionFromAddressForWholeAmountR> CreateCoinsTransactionFromAddressForWholeAmountAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionFromAddressForWholeAmountR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR>> CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Coins Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionRequestFromAddressR</returns>
        System.Threading.Tasks.Task<CreateCoinsTransactionRequestFromAddressR> CreateCoinsTransactionRequestFromAddressAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Coins Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionRequestFromAddressR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCoinsTransactionRequestFromAddressR>> CreateCoinsTransactionRequestFromAddressWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Coins Transaction Request from Wallet
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionRequestFromWalletR</returns>
        System.Threading.Tasks.Task<CreateCoinsTransactionRequestFromWalletR> CreateCoinsTransactionRequestFromWalletAsync(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Coins Transaction Request from Wallet
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionRequestFromWalletR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCoinsTransactionRequestFromWalletR>> CreateCoinsTransactionRequestFromWalletWithHttpInfoAsync(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        System.Threading.Tasks.Task<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR>> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFungibleTokensTransactionRequestFromAddressR</returns>
        System.Threading.Tasks.Task<CreateFungibleTokensTransactionRequestFromAddressR> CreateFungibleTokensTransactionRequestFromAddressAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFungibleTokensTransactionRequestFromAddressR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR>> CreateFungibleTokensTransactionRequestFromAddressWithHttpInfoAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        System.Threading.Tasks.Task<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> CreateSingleTransactionRequestFromAddressWithoutFeePriorityAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSingleTransactionRequestFromAddressWithoutFeePriorityR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR>> CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : ITransactionsApiSync, ITransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private CryptoAPIs.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(string basePath)
        {
            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                new CryptoAPIs.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(CryptoAPIs.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionsApi(CryptoAPIs.Client.ISynchronousClient client, CryptoAPIs.Client.IAsynchronousClient asyncClient, CryptoAPIs.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CryptoAPIs.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CryptoAPIs.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CryptoAPIs.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CryptoAPIs.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        public CreateCoinsTransactionFromAddressForWholeAmountR CreateCoinsTransactionFromAddressForWholeAmount(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR> localVarResponse = CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfo(address, blockchain, network, walletId, context, createCoinsTransactionFromAddressForWholeAmountRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR> CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionFromAddressForWholeAmountRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionFromAddressForWholeAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCoinsTransactionFromAddressForWholeAmountR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/all-transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionFromAddressForWholeAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionFromAddressForWholeAmountR</returns>
        public async System.Threading.Tasks.Task<CreateCoinsTransactionFromAddressForWholeAmountR> CreateCoinsTransactionFromAddressForWholeAmountAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR> localVarResponse = await CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfoAsync(address, blockchain, network, walletId, context, createCoinsTransactionFromAddressForWholeAmountRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction From Address For Whole Amount Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the source address.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionFromAddressForWholeAmountRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionFromAddressForWholeAmountR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionFromAddressForWholeAmountR>> CreateCoinsTransactionFromAddressForWholeAmountWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = default(CreateCoinsTransactionFromAddressForWholeAmountRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionFromAddressForWholeAmount");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionFromAddressForWholeAmountRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionFromAddressForWholeAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCoinsTransactionFromAddressForWholeAmountR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/all-transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionFromAddressForWholeAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Coins Transaction Request from Address Through this endpoint users can create a new single transaction request from one address to another.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionRequestFromAddressR</returns>
        public CreateCoinsTransactionRequestFromAddressR CreateCoinsTransactionRequestFromAddress(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromAddressR> localVarResponse = CreateCoinsTransactionRequestFromAddressWithHttpInfo(address, blockchain, network, walletId, context, createCoinsTransactionRequestFromAddressRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction Request from Address Through this endpoint users can create a new single transaction request from one address to another.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionRequestFromAddressR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromAddressR> CreateCoinsTransactionRequestFromAddressWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionRequestFromAddressRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionRequestFromAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCoinsTransactionRequestFromAddressR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionRequestFromAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Coins Transaction Request from Address Through this endpoint users can create a new single transaction request from one address to another.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionRequestFromAddressR</returns>
        public async System.Threading.Tasks.Task<CreateCoinsTransactionRequestFromAddressR> CreateCoinsTransactionRequestFromAddressAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromAddressR> localVarResponse = await CreateCoinsTransactionRequestFromAddressWithHttpInfoAsync(address, blockchain, network, walletId, context, createCoinsTransactionRequestFromAddressRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction Request from Address Through this endpoint users can create a new single transaction request from one address to another.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction. For XRP we also support the X-address format.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionRequestFromAddressR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromAddressR>> CreateCoinsTransactionRequestFromAddressWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = default(CreateCoinsTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionRequestFromAddress");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionRequestFromAddressRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionRequestFromAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCoinsTransactionRequestFromAddressR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionRequestFromAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Coins Transaction Request from Wallet Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCoinsTransactionRequestFromWalletR</returns>
        public CreateCoinsTransactionRequestFromWalletR CreateCoinsTransactionRequestFromWallet(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromWalletR> localVarResponse = CreateCoinsTransactionRequestFromWalletWithHttpInfo(blockchain, network, walletId, context, createCoinsTransactionRequestFromWalletRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction Request from Wallet Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCoinsTransactionRequestFromWalletR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromWalletR> CreateCoinsTransactionRequestFromWalletWithHttpInfo(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionRequestFromWalletRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionRequestFromWallet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCoinsTransactionRequestFromWalletR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionRequestFromWallet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Coins Transaction Request from Wallet Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoinsTransactionRequestFromWalletR</returns>
        public async System.Threading.Tasks.Task<CreateCoinsTransactionRequestFromWalletR> CreateCoinsTransactionRequestFromWalletAsync(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromWalletR> localVarResponse = await CreateCoinsTransactionRequestFromWalletWithHttpInfoAsync(blockchain, network, walletId, context, createCoinsTransactionRequestFromWalletRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Coins Transaction Request from Wallet Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createCoinsTransactionRequestFromWalletRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoinsTransactionRequestFromWalletR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateCoinsTransactionRequestFromWalletR>> CreateCoinsTransactionRequestFromWalletWithHttpInfoAsync(string blockchain, string network, string walletId, string context = default(string), CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = default(CreateCoinsTransactionRequestFromWalletRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateCoinsTransactionRequestFromWallet");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createCoinsTransactionRequestFromWalletRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateCoinsTransactionRequestFromWallet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCoinsTransactionRequestFromWalletR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoinsTransactionRequestFromWallet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> localVarResponse = CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(blockchain, network, senderAddress, walletId, context, createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'senderAddress' is set
            if (senderAddress == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'senderAddress' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("senderAddress", CryptoAPIs.Client.ClientUtils.ParameterToString(senderAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/feeless-token-transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public async System.Threading.Tasks.Task<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR> localVarResponse = await CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(blockchain, network, senderAddress, walletId, context, createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fungible Token Transaction Request From Address Without Fee Priority Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR>> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'senderAddress' is set
            if (senderAddress == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'senderAddress' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("senderAddress", CryptoAPIs.Client.ClientUtils.ParameterToString(senderAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/feeless-token-transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFungibleTokensTransactionRequestFromAddressR</returns>
        public CreateFungibleTokensTransactionRequestFromAddressR CreateFungibleTokensTransactionRequestFromAddress(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR> localVarResponse = CreateFungibleTokensTransactionRequestFromAddressWithHttpInfo(blockchain, network, senderAddress, walletId, context, createFungibleTokensTransactionRequestFromAddressRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFungibleTokensTransactionRequestFromAddressR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR> CreateFungibleTokensTransactionRequestFromAddressWithHttpInfo(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'senderAddress' is set
            if (senderAddress == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'senderAddress' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("senderAddress", CryptoAPIs.Client.ClientUtils.ParameterToString(senderAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createFungibleTokensTransactionRequestFromAddressRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateFungibleTokensTransactionRequestFromAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFungibleTokensTransactionRequestFromAddressR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/token-transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFungibleTokensTransactionRequestFromAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFungibleTokensTransactionRequestFromAddressR</returns>
        public async System.Threading.Tasks.Task<CreateFungibleTokensTransactionRequestFromAddressR> CreateFungibleTokensTransactionRequestFromAddressAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR> localVarResponse = await CreateFungibleTokensTransactionRequestFromAddressWithHttpInfoAsync(blockchain, network, senderAddress, walletId, context, createFungibleTokensTransactionRequestFromAddressRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fungible Tokens Transaction Request from Address Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="senderAddress">Defines the specific source address for the transaction.</param>
        /// <param name="walletId">Defines the unique ID of the Wallet.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createFungibleTokensTransactionRequestFromAddressRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFungibleTokensTransactionRequestFromAddressR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateFungibleTokensTransactionRequestFromAddressR>> CreateFungibleTokensTransactionRequestFromAddressWithHttpInfoAsync(string blockchain, string network, string senderAddress, string walletId, string context = default(string), CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = default(CreateFungibleTokensTransactionRequestFromAddressRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'senderAddress' is set
            if (senderAddress == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'senderAddress' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateFungibleTokensTransactionRequestFromAddress");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("senderAddress", CryptoAPIs.Client.ClientUtils.ParameterToString(senderAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createFungibleTokensTransactionRequestFromAddressRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateFungibleTokensTransactionRequestFromAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFungibleTokensTransactionRequestFromAddressR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/token-transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFungibleTokensTransactionRequestFromAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public CreateSingleTransactionRequestFromAddressWithoutFeePriorityR CreateSingleTransactionRequestFromAddressWithoutFeePriority(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> localVarResponse = CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(address, blockchain, network, walletId, context, createSingleTransactionRequestFromAddressWithoutFeePriorityRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public CryptoAPIs.Client.ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createSingleTransactionRequestFromAddressWithoutFeePriorityRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateSingleTransactionRequestFromAddressWithoutFeePriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/feeless-transaction-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSingleTransactionRequestFromAddressWithoutFeePriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSingleTransactionRequestFromAddressWithoutFeePriorityR</returns>
        public async System.Threading.Tasks.Task<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> CreateSingleTransactionRequestFromAddressWithoutFeePriorityAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR> localVarResponse = await CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(address, blockchain, network, walletId, context, createSingleTransactionRequestFromAddressWithoutFeePriorityRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Single Transaction Request From Address Without Fee Priority Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Defines the specific source address for the transaction.</param>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="walletId">Represents the sender&#39;s specific and unique Wallet ID of the sender.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="createSingleTransactionRequestFromAddressWithoutFeePriorityRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSingleTransactionRequestFromAddressWithoutFeePriorityR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR>> CreateSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfoAsync(string address, string blockchain, string network, string walletId, string context = default(string), CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = default(CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'address' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }

            // verify the required parameter 'walletId' is set
            if (walletId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'walletId' when calling TransactionsApi->CreateSingleTransactionRequestFromAddressWithoutFeePriority");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", CryptoAPIs.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("walletId", CryptoAPIs.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = createSingleTransactionRequestFromAddressWithoutFeePriorityRB;

            localVarRequestOptions.Operation = "TransactionsApi.CreateSingleTransactionRequestFromAddressWithoutFeePriority";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSingleTransactionRequestFromAddressWithoutFeePriorityR>("/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/feeless-transaction-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSingleTransactionRequestFromAddressWithoutFeePriority", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
