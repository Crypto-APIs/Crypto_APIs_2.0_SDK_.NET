/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CryptoAPIs.Client;
using CryptoAPIs.Model;

namespace CryptoAPIs.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHDWalletsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Derive And Sync New Change Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeriveAndSyncNewChangeAddressesR</returns>
        DeriveAndSyncNewChangeAddressesR DeriveAndSyncNewChangeAddresses(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0);

        /// <summary>
        /// Derive And Sync New Change Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeriveAndSyncNewChangeAddressesR</returns>
        ApiResponse<DeriveAndSyncNewChangeAddressesR> DeriveAndSyncNewChangeAddressesWithHttpInfo(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0);
        /// <summary>
        /// Derive And Sync New Receiving Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeriveAndSyncNewReceivingAddressesR</returns>
        DeriveAndSyncNewReceivingAddressesR DeriveAndSyncNewReceivingAddresses(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0);

        /// <summary>
        /// Derive And Sync New Receiving Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeriveAndSyncNewReceivingAddressesR</returns>
        ApiResponse<DeriveAndSyncNewReceivingAddressesR> DeriveAndSyncNewReceivingAddressesWithHttpInfo(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0);
        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets
        /// </summary>
        /// <remarks>
        /// This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHDWalletXPubYPubZPubAssetsR</returns>
        GetHDWalletXPubYPubZPubAssetsR GetHDWalletXPubYPubZPubAssets(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0);

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets
        /// </summary>
        /// <remarks>
        /// This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHDWalletXPubYPubZPubAssetsR</returns>
        ApiResponse<GetHDWalletXPubYPubZPubAssetsR> GetHDWalletXPubYPubZPubAssetsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0);
        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details
        /// </summary>
        /// <remarks>
        /// HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHDWalletXPubYPubZPubDetailsR</returns>
        GetHDWalletXPubYPubZPubDetailsR GetHDWalletXPubYPubZPubDetails(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0);

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details
        /// </summary>
        /// <remarks>
        /// HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHDWalletXPubYPubZPubDetailsR</returns>
        ApiResponse<GetHDWalletXPubYPubZPubDetailsR> GetHDWalletXPubYPubZPubDetailsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0);
        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions
        /// </summary>
        /// <remarks>
        /// This endpoint will list HD Wallet transactions.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListHDWalletXPubYPubZPubTransactionsR</returns>
        ListHDWalletXPubYPubZPubTransactionsR ListHDWalletXPubYPubZPubTransactions(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions
        /// </summary>
        /// <remarks>
        /// This endpoint will list HD Wallet transactions.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListHDWalletXPubYPubZPubTransactionsR</returns>
        ApiResponse<ListHDWalletXPubYPubZPubTransactionsR> ListHDWalletXPubYPubZPubTransactionsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);
        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs
        /// </summary>
        /// <remarks>
        /// Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListHDWalletXPubYPubZPubUTXOsR</returns>
        ListHDWalletXPubYPubZPubUTXOsR ListHDWalletXPubYPubZPubUTXOs(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs
        /// </summary>
        /// <remarks>
        /// Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListHDWalletXPubYPubZPubUTXOsR</returns>
        ApiResponse<ListHDWalletXPubYPubZPubUTXOsR> ListHDWalletXPubYPubZPubUTXOsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);
        /// <summary>
        /// List Synced Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSyncedAddressesR</returns>
        ListSyncedAddressesR ListSyncedAddresses(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);

        /// <summary>
        /// List Synced Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSyncedAddressesR</returns>
        ApiResponse<ListSyncedAddressesR> ListSyncedAddressesWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0);
        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0);

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0);
        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0);

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0);
        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncHDWalletXPubYPubZPubR</returns>
        SyncHDWalletXPubYPubZPubR SyncHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0);

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncHDWalletXPubYPubZPubR</returns>
        ApiResponse<SyncHDWalletXPubYPubZPubR> SyncHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0);
        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncNewHDWalletXPubYPubZPubR</returns>
        SyncNewHDWalletXPubYPubZPubR SyncNewHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0);

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncNewHDWalletXPubYPubZPubR</returns>
        ApiResponse<SyncNewHDWalletXPubYPubZPubR> SyncNewHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHDWalletsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Derive And Sync New Change Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeriveAndSyncNewChangeAddressesR</returns>
        System.Threading.Tasks.Task<DeriveAndSyncNewChangeAddressesR> DeriveAndSyncNewChangeAddressesAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Derive And Sync New Change Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeriveAndSyncNewChangeAddressesR)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeriveAndSyncNewChangeAddressesR>> DeriveAndSyncNewChangeAddressesWithHttpInfoAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Derive And Sync New Receiving Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeriveAndSyncNewReceivingAddressesR</returns>
        System.Threading.Tasks.Task<DeriveAndSyncNewReceivingAddressesR> DeriveAndSyncNewReceivingAddressesAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Derive And Sync New Receiving Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeriveAndSyncNewReceivingAddressesR)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeriveAndSyncNewReceivingAddressesR>> DeriveAndSyncNewReceivingAddressesWithHttpInfoAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets
        /// </summary>
        /// <remarks>
        /// This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHDWalletXPubYPubZPubAssetsR</returns>
        System.Threading.Tasks.Task<GetHDWalletXPubYPubZPubAssetsR> GetHDWalletXPubYPubZPubAssetsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets
        /// </summary>
        /// <remarks>
        /// This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHDWalletXPubYPubZPubAssetsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHDWalletXPubYPubZPubAssetsR>> GetHDWalletXPubYPubZPubAssetsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details
        /// </summary>
        /// <remarks>
        /// HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHDWalletXPubYPubZPubDetailsR</returns>
        System.Threading.Tasks.Task<GetHDWalletXPubYPubZPubDetailsR> GetHDWalletXPubYPubZPubDetailsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details
        /// </summary>
        /// <remarks>
        /// HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHDWalletXPubYPubZPubDetailsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHDWalletXPubYPubZPubDetailsR>> GetHDWalletXPubYPubZPubDetailsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions
        /// </summary>
        /// <remarks>
        /// This endpoint will list HD Wallet transactions.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListHDWalletXPubYPubZPubTransactionsR</returns>
        System.Threading.Tasks.Task<ListHDWalletXPubYPubZPubTransactionsR> ListHDWalletXPubYPubZPubTransactionsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions
        /// </summary>
        /// <remarks>
        /// This endpoint will list HD Wallet transactions.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListHDWalletXPubYPubZPubTransactionsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListHDWalletXPubYPubZPubTransactionsR>> ListHDWalletXPubYPubZPubTransactionsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs
        /// </summary>
        /// <remarks>
        /// Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListHDWalletXPubYPubZPubUTXOsR</returns>
        System.Threading.Tasks.Task<ListHDWalletXPubYPubZPubUTXOsR> ListHDWalletXPubYPubZPubUTXOsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs
        /// </summary>
        /// <remarks>
        /// Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListHDWalletXPubYPubZPubUTXOsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListHDWalletXPubYPubZPubUTXOsR>> ListHDWalletXPubYPubZPubUTXOsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Synced Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSyncedAddressesR</returns>
        System.Threading.Tasks.Task<ListSyncedAddressesR> ListSyncedAddressesAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Synced Addresses
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSyncedAddressesR)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSyncedAddressesR>> ListSyncedAddressesWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        System.Threading.Tasks.Task<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR>> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        System.Threading.Tasks.Task<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR>> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncHDWalletXPubYPubZPubR</returns>
        System.Threading.Tasks.Task<SyncHDWalletXPubYPubZPubR> SyncHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncHDWalletXPubYPubZPubR)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncHDWalletXPubYPubZPubR>> SyncHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncNewHDWalletXPubYPubZPubR</returns>
        System.Threading.Tasks.Task<SyncNewHDWalletXPubYPubZPubR> SyncNewHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub)
        /// </summary>
        /// <remarks>
        /// Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncNewHDWalletXPubYPubZPubR)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncNewHDWalletXPubYPubZPubR>> SyncNewHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHDWalletsApi : IHDWalletsApiSync, IHDWalletsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HDWalletsApi : IHDWalletsApi
    {
        private CryptoAPIs.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HDWalletsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HDWalletsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HDWalletsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HDWalletsApi(string basePath)
        {
            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                new CryptoAPIs.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HDWalletsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HDWalletsApi(CryptoAPIs.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HDWalletsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HDWalletsApi(CryptoAPIs.Client.ISynchronousClient client, CryptoAPIs.Client.IAsynchronousClient asyncClient, CryptoAPIs.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CryptoAPIs.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CryptoAPIs.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CryptoAPIs.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CryptoAPIs.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Derive And Sync New Change Addresses Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeriveAndSyncNewChangeAddressesR</returns>
        public DeriveAndSyncNewChangeAddressesR DeriveAndSyncNewChangeAddresses(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewChangeAddressesR> localVarResponse = DeriveAndSyncNewChangeAddressesWithHttpInfo(blockchain, network, context, deriveAndSyncNewChangeAddressesRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive And Sync New Change Addresses Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeriveAndSyncNewChangeAddressesR</returns>
        public CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewChangeAddressesR> DeriveAndSyncNewChangeAddressesWithHttpInfo(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->DeriveAndSyncNewChangeAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->DeriveAndSyncNewChangeAddresses");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = deriveAndSyncNewChangeAddressesRB;

            localVarRequestOptions.Operation = "HDWalletsApi.DeriveAndSyncNewChangeAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeriveAndSyncNewChangeAddressesR>("/blockchain-data/{blockchain}/{network}/hd/derive-sync-change", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeriveAndSyncNewChangeAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive And Sync New Change Addresses Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeriveAndSyncNewChangeAddressesR</returns>
        public async System.Threading.Tasks.Task<DeriveAndSyncNewChangeAddressesR> DeriveAndSyncNewChangeAddressesAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewChangeAddressesR> localVarResponse = await DeriveAndSyncNewChangeAddressesWithHttpInfoAsync(blockchain, network, context, deriveAndSyncNewChangeAddressesRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive And Sync New Change Addresses Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewChangeAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeriveAndSyncNewChangeAddressesR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewChangeAddressesR>> DeriveAndSyncNewChangeAddressesWithHttpInfoAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = default(DeriveAndSyncNewChangeAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->DeriveAndSyncNewChangeAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->DeriveAndSyncNewChangeAddresses");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = deriveAndSyncNewChangeAddressesRB;

            localVarRequestOptions.Operation = "HDWalletsApi.DeriveAndSyncNewChangeAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeriveAndSyncNewChangeAddressesR>("/blockchain-data/{blockchain}/{network}/hd/derive-sync-change", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeriveAndSyncNewChangeAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive And Sync New Receiving Addresses Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeriveAndSyncNewReceivingAddressesR</returns>
        public DeriveAndSyncNewReceivingAddressesR DeriveAndSyncNewReceivingAddresses(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewReceivingAddressesR> localVarResponse = DeriveAndSyncNewReceivingAddressesWithHttpInfo(blockchain, network, context, deriveAndSyncNewReceivingAddressesRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive And Sync New Receiving Addresses Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeriveAndSyncNewReceivingAddressesR</returns>
        public CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewReceivingAddressesR> DeriveAndSyncNewReceivingAddressesWithHttpInfo(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->DeriveAndSyncNewReceivingAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->DeriveAndSyncNewReceivingAddresses");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = deriveAndSyncNewReceivingAddressesRB;

            localVarRequestOptions.Operation = "HDWalletsApi.DeriveAndSyncNewReceivingAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeriveAndSyncNewReceivingAddressesR>("/blockchain-data/{blockchain}/{network}/hd/derive-and-sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeriveAndSyncNewReceivingAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive And Sync New Receiving Addresses Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeriveAndSyncNewReceivingAddressesR</returns>
        public async System.Threading.Tasks.Task<DeriveAndSyncNewReceivingAddressesR> DeriveAndSyncNewReceivingAddressesAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewReceivingAddressesR> localVarResponse = await DeriveAndSyncNewReceivingAddressesWithHttpInfoAsync(blockchain, network, context, deriveAndSyncNewReceivingAddressesRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive And Sync New Receiving Addresses Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="deriveAndSyncNewReceivingAddressesRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeriveAndSyncNewReceivingAddressesR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<DeriveAndSyncNewReceivingAddressesR>> DeriveAndSyncNewReceivingAddressesWithHttpInfoAsync(string blockchain, string network, string context = default(string), DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = default(DeriveAndSyncNewReceivingAddressesRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->DeriveAndSyncNewReceivingAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->DeriveAndSyncNewReceivingAddresses");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = deriveAndSyncNewReceivingAddressesRB;

            localVarRequestOptions.Operation = "HDWalletsApi.DeriveAndSyncNewReceivingAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeriveAndSyncNewReceivingAddressesR>("/blockchain-data/{blockchain}/{network}/hd/derive-and-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeriveAndSyncNewReceivingAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHDWalletXPubYPubZPubAssetsR</returns>
        public GetHDWalletXPubYPubZPubAssetsR GetHDWalletXPubYPubZPubAssets(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubAssetsR> localVarResponse = GetHDWalletXPubYPubZPubAssetsWithHttpInfo(blockchain, extendedPublicKey, network, context, derivation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHDWalletXPubYPubZPubAssetsR</returns>
        public CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubAssetsR> GetHDWalletXPubYPubZPubAssetsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.GetHDWalletXPubYPubZPubAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetHDWalletXPubYPubZPubAssetsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHDWalletXPubYPubZPubAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHDWalletXPubYPubZPubAssetsR</returns>
        public async System.Threading.Tasks.Task<GetHDWalletXPubYPubZPubAssetsR> GetHDWalletXPubYPubZPubAssetsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubAssetsR> localVarResponse = await GetHDWalletXPubYPubZPubAssetsWithHttpInfoAsync(blockchain, extendedPublicKey, network, context, derivation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Assets This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHDWalletXPubYPubZPubAssetsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubAssetsR>> GetHDWalletXPubYPubZPubAssetsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->GetHDWalletXPubYPubZPubAssets");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.GetHDWalletXPubYPubZPubAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetHDWalletXPubYPubZPubAssetsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHDWalletXPubYPubZPubAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHDWalletXPubYPubZPubDetailsR</returns>
        public GetHDWalletXPubYPubZPubDetailsR GetHDWalletXPubYPubZPubDetails(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubDetailsR> localVarResponse = GetHDWalletXPubYPubZPubDetailsWithHttpInfo(blockchain, extendedPublicKey, network, context, derivation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHDWalletXPubYPubZPubDetailsR</returns>
        public CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubDetailsR> GetHDWalletXPubYPubZPubDetailsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.GetHDWalletXPubYPubZPubDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetHDWalletXPubYPubZPubDetailsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHDWalletXPubYPubZPubDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHDWalletXPubYPubZPubDetailsR</returns>
        public async System.Threading.Tasks.Task<GetHDWalletXPubYPubZPubDetailsR> GetHDWalletXPubYPubZPubDetailsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubDetailsR> localVarResponse = await GetHDWalletXPubYPubZPubDetailsWithHttpInfoAsync(blockchain, extendedPublicKey, network, context, derivation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HD Wallet (xPub, yPub, zPub) Details HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHDWalletXPubYPubZPubDetailsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<GetHDWalletXPubYPubZPubDetailsR>> GetHDWalletXPubYPubZPubDetailsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->GetHDWalletXPubYPubZPubDetails");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.GetHDWalletXPubYPubZPubDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetHDWalletXPubYPubZPubDetailsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHDWalletXPubYPubZPubDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions This endpoint will list HD Wallet transactions.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListHDWalletXPubYPubZPubTransactionsR</returns>
        public ListHDWalletXPubYPubZPubTransactionsR ListHDWalletXPubYPubZPubTransactions(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubTransactionsR> localVarResponse = ListHDWalletXPubYPubZPubTransactionsWithHttpInfo(blockchain, extendedPublicKey, network, context, derivation, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions This endpoint will list HD Wallet transactions.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListHDWalletXPubYPubZPubTransactionsR</returns>
        public CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubTransactionsR> ListHDWalletXPubYPubZPubTransactionsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListHDWalletXPubYPubZPubTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListHDWalletXPubYPubZPubTransactionsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHDWalletXPubYPubZPubTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions This endpoint will list HD Wallet transactions.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListHDWalletXPubYPubZPubTransactionsR</returns>
        public async System.Threading.Tasks.Task<ListHDWalletXPubYPubZPubTransactionsR> ListHDWalletXPubYPubZPubTransactionsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubTransactionsR> localVarResponse = await ListHDWalletXPubYPubZPubTransactionsWithHttpInfoAsync(blockchain, extendedPublicKey, network, context, derivation, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) Transactions This endpoint will list HD Wallet transactions.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain.</param>
        /// <param name="extendedPublicKey">Defines the master public key (xPub) of the account.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListHDWalletXPubYPubZPubTransactionsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubTransactionsR>> ListHDWalletXPubYPubZPubTransactionsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListHDWalletXPubYPubZPubTransactions");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListHDWalletXPubYPubZPubTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListHDWalletXPubYPubZPubTransactionsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHDWalletXPubYPubZPubTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListHDWalletXPubYPubZPubUTXOsR</returns>
        public ListHDWalletXPubYPubZPubUTXOsR ListHDWalletXPubYPubZPubUTXOs(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubUTXOsR> localVarResponse = ListHDWalletXPubYPubZPubUTXOsWithHttpInfo(blockchain, extendedPublicKey, network, context, derivation, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListHDWalletXPubYPubZPubUTXOsR</returns>
        public CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubUTXOsR> ListHDWalletXPubYPubZPubUTXOsWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListHDWalletXPubYPubZPubUTXOs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListHDWalletXPubYPubZPubUTXOsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/utxos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHDWalletXPubYPubZPubUTXOs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListHDWalletXPubYPubZPubUTXOsR</returns>
        public async System.Threading.Tasks.Task<ListHDWalletXPubYPubZPubUTXOsR> ListHDWalletXPubYPubZPubUTXOsAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubUTXOsR> localVarResponse = await ListHDWalletXPubYPubZPubUTXOsWithHttpInfoAsync(blockchain, extendedPublicKey, network, context, derivation, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HD Wallet (xPub, yPub, zPub) UTXOs Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="derivation">The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListHDWalletXPubYPubZPubUTXOsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<ListHDWalletXPubYPubZPubUTXOsR>> ListHDWalletXPubYPubZPubUTXOsWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string derivation = default(string), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListHDWalletXPubYPubZPubUTXOs");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (derivation != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "derivation", derivation));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListHDWalletXPubYPubZPubUTXOs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListHDWalletXPubYPubZPubUTXOsR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/utxos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHDWalletXPubYPubZPubUTXOs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Synced Addresses Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSyncedAddressesR</returns>
        public ListSyncedAddressesR ListSyncedAddresses(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<ListSyncedAddressesR> localVarResponse = ListSyncedAddressesWithHttpInfo(blockchain, extendedPublicKey, network, context, addressFormat, isChangeAddress, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Synced Addresses Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSyncedAddressesR</returns>
        public CryptoAPIs.Client.ApiResponse<ListSyncedAddressesR> ListSyncedAddressesWithHttpInfo(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListSyncedAddresses");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListSyncedAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListSyncedAddresses");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (addressFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "addressFormat", addressFormat));
            }
            if (isChangeAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "isChangeAddress", isChangeAddress));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListSyncedAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSyncedAddressesR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/synced-addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncedAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Synced Addresses Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSyncedAddressesR</returns>
        public async System.Threading.Tasks.Task<ListSyncedAddressesR> ListSyncedAddressesAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<ListSyncedAddressesR> localVarResponse = await ListSyncedAddressesWithHttpInfoAsync(blockchain, extendedPublicKey, network, context, addressFormat, isChangeAddress, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Synced Addresses Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="extendedPublicKey">Defines the account extended publicly known key which is used to derive all child public keys.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="addressFormat">Defines the address format value. (optional)</param>
        /// <param name="isChangeAddress">Defines if the address is change addres or not. (optional, default to true)</param>
        /// <param name="limit">Defines how many items should be returned in the response per page basis. (optional, default to 50)</param>
        /// <param name="offset">The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSyncedAddressesR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<ListSyncedAddressesR>> ListSyncedAddressesWithHttpInfoAsync(string blockchain, string extendedPublicKey, string network, string context = default(string), string addressFormat = default(string), bool? isChangeAddress = default(bool?), long? limit = default(long?), long? offset = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->ListSyncedAddresses");
            }

            // verify the required parameter 'extendedPublicKey' is set
            if (extendedPublicKey == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'extendedPublicKey' when calling HDWalletsApi->ListSyncedAddresses");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->ListSyncedAddresses");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("extendedPublicKey", CryptoAPIs.Client.ClientUtils.ParameterToString(extendedPublicKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (addressFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "addressFormat", addressFormat));
            }
            if (isChangeAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "isChangeAddress", isChangeAddress));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "HDWalletsApi.ListSyncedAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSyncedAddressesR>("/blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/synced-addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncedAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> localVarResponse = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(blockchain, network, context, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public CryptoAPIs.Client.ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/transactions/prepare-utxo-transaction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public async System.Threading.Tasks.Task<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR> localVarResponse = await PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(blockchain, network, context, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR>> PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/transactions/prepare-utxo-transaction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> localVarResponse = PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(blockchain, network, context, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public CryptoAPIs.Client.ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/transactions/prepare-account-based-transaction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR</returns>
        public async System.Threading.Tasks.Task<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR> localVarResponse = await PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(blockchain, network, context, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub) Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR>> PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = default(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/transactions/prepare-account-based-transaction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub) HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncHDWalletXPubYPubZPubR</returns>
        public SyncHDWalletXPubYPubZPubR SyncHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<SyncHDWalletXPubYPubZPubR> localVarResponse = SyncHDWalletXPubYPubZPubWithHttpInfo(blockchain, network, context, syncHDWalletXPubYPubZPubRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub) HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncHDWalletXPubYPubZPubR</returns>
        public CryptoAPIs.Client.ApiResponse<SyncHDWalletXPubYPubZPubR> SyncHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->SyncHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->SyncHDWalletXPubYPubZPub");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = syncHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.SyncHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SyncHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/hd/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub) HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncHDWalletXPubYPubZPubR</returns>
        public async System.Threading.Tasks.Task<SyncHDWalletXPubYPubZPubR> SyncHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<SyncHDWalletXPubYPubZPubR> localVarResponse = await SyncHDWalletXPubYPubZPubWithHttpInfoAsync(blockchain, network, context, syncHDWalletXPubYPubZPubRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync HD Wallet (xPub, yPub, zPub) HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncHDWalletXPubYPubZPubR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<SyncHDWalletXPubYPubZPubR>> SyncHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = default(SyncHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->SyncHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->SyncHDWalletXPubYPubZPub");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = syncHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.SyncHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SyncHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/hd/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub) Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncNewHDWalletXPubYPubZPubR</returns>
        public SyncNewHDWalletXPubYPubZPubR SyncNewHDWalletXPubYPubZPub(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            CryptoAPIs.Client.ApiResponse<SyncNewHDWalletXPubYPubZPubR> localVarResponse = SyncNewHDWalletXPubYPubZPubWithHttpInfo(blockchain, network, context, syncNewHDWalletXPubYPubZPubRB);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub) Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncNewHDWalletXPubYPubZPubR</returns>
        public CryptoAPIs.Client.ApiResponse<SyncNewHDWalletXPubYPubZPubR> SyncNewHDWalletXPubYPubZPubWithHttpInfo(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0)
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->SyncNewHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->SyncNewHDWalletXPubYPubZPub");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = syncNewHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.SyncNewHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SyncNewHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/hd/sync-new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNewHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub) Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncNewHDWalletXPubYPubZPubR</returns>
        public async System.Threading.Tasks.Task<SyncNewHDWalletXPubYPubZPubR> SyncNewHDWalletXPubYPubZPubAsync(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<SyncNewHDWalletXPubYPubZPubR> localVarResponse = await SyncNewHDWalletXPubYPubZPubWithHttpInfoAsync(blockchain, network, context, syncNewHDWalletXPubYPubZPubRB, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync New HD Wallet (xPub, yPub, zPub) Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain">Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.</param>
        /// <param name="network">Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="syncNewHDWalletXPubYPubZPubRB"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncNewHDWalletXPubYPubZPubR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<SyncNewHDWalletXPubYPubZPubR>> SyncNewHDWalletXPubYPubZPubWithHttpInfoAsync(string blockchain, string network, string context = default(string), SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = default(SyncNewHDWalletXPubYPubZPubRB), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'blockchain' when calling HDWalletsApi->SyncNewHDWalletXPubYPubZPub");
            }

            // verify the required parameter 'network' is set
            if (network == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'network' when calling HDWalletsApi->SyncNewHDWalletXPubYPubZPub");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockchain", CryptoAPIs.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", CryptoAPIs.Client.ClientUtils.ParameterToString(network)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            localVarRequestOptions.Data = syncNewHDWalletXPubYPubZPubRB;

            localVarRequestOptions.Operation = "HDWalletsApi.SyncNewHDWalletXPubYPubZPub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SyncNewHDWalletXPubYPubZPubR>("/blockchain-data/{blockchain}/{network}/hd/sync-new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNewHDWalletXPubYPubZPub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
