/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CryptoAPIs.Client;
using CryptoAPIs.Model;

namespace CryptoAPIs.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>GetExchangeRateByAssetSymbolsR</returns>
        GetExchangeRateByAssetSymbolsR GetExchangeRateByAssetSymbols(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?));

        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetSymbolsR</returns>
        ApiResponse<GetExchangeRateByAssetSymbolsR> GetExchangeRateByAssetSymbolsWithHttpInfo(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?));
        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>GetExchangeRateByAssetsIDsR</returns>
        GetExchangeRateByAssetsIDsR GetExchangeRateByAssetsIDs(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?));

        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetsIDsR</returns>
        ApiResponse<GetExchangeRateByAssetsIDsR> GetExchangeRateByAssetsIDsWithHttpInfo(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetSymbolsR</returns>
        System.Threading.Tasks.Task<GetExchangeRateByAssetSymbolsR> GetExchangeRateByAssetSymbolsAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetSymbolsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExchangeRateByAssetSymbolsR>> GetExchangeRateByAssetSymbolsWithHttpInfoAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetsIDsR</returns>
        System.Threading.Tasks.Task<GetExchangeRateByAssetsIDsR> GetExchangeRateByAssetsIDsAsync(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetsIDsR)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExchangeRateByAssetsIDsR>> GetExchangeRateByAssetsIDsWithHttpInfoAsync(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApi : IExchangeRatesApiSync, IExchangeRatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeRatesApi : IExchangeRatesApi
    {
        private CryptoAPIs.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeRatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeRatesApi(string basePath)
        {
            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                new CryptoAPIs.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeRatesApi(CryptoAPIs.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CryptoAPIs.Client.Configuration.MergeConfigurations(
                CryptoAPIs.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CryptoAPIs.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExchangeRatesApi(CryptoAPIs.Client.ISynchronousClient client, CryptoAPIs.Client.IAsynchronousClient asyncClient, CryptoAPIs.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CryptoAPIs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CryptoAPIs.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CryptoAPIs.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CryptoAPIs.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CryptoAPIs.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>GetExchangeRateByAssetSymbolsR</returns>
        public GetExchangeRateByAssetSymbolsR GetExchangeRateByAssetSymbols(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?))
        {
            CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetSymbolsR> localVarResponse = GetExchangeRateByAssetSymbolsWithHttpInfo(fromAssetSymbol, toAssetSymbol, context, calculationTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetSymbolsR</returns>
        public CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetSymbolsR> GetExchangeRateByAssetSymbolsWithHttpInfo(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?))
        {
            // verify the required parameter 'fromAssetSymbol' is set
            if (fromAssetSymbol == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'fromAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");
            }

            // verify the required parameter 'toAssetSymbol' is set
            if (toAssetSymbol == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'toAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromAssetSymbol", CryptoAPIs.Client.ClientUtils.ParameterToString(fromAssetSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetSymbol", CryptoAPIs.Client.ClientUtils.ParameterToString(toAssetSymbol)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (calculationTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "calculationTimestamp", calculationTimestamp));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExchangeRateByAssetSymbolsR>("/market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetSymbolsR</returns>
        public async System.Threading.Tasks.Task<GetExchangeRateByAssetSymbolsR> GetExchangeRateByAssetSymbolsAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetSymbolsR> localVarResponse = await GetExchangeRateByAssetSymbolsWithHttpInfoAsync(fromAssetSymbol, toAssetSymbol, context, calculationTimestamp, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetSymbolsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetSymbolsR>> GetExchangeRateByAssetSymbolsWithHttpInfoAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromAssetSymbol' is set
            if (fromAssetSymbol == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'fromAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");
            }

            // verify the required parameter 'toAssetSymbol' is set
            if (toAssetSymbol == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'toAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromAssetSymbol", CryptoAPIs.Client.ClientUtils.ParameterToString(fromAssetSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetSymbol", CryptoAPIs.Client.ClientUtils.ParameterToString(toAssetSymbol)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (calculationTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "calculationTimestamp", calculationTimestamp));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExchangeRateByAssetSymbolsR>("/market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>GetExchangeRateByAssetsIDsR</returns>
        public GetExchangeRateByAssetsIDsR GetExchangeRateByAssetsIDs(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?))
        {
            CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetsIDsR> localVarResponse = GetExchangeRateByAssetsIDsWithHttpInfo(fromAssetId, toAssetId, context, calculationTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetsIDsR</returns>
        public CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetsIDsR> GetExchangeRateByAssetsIDsWithHttpInfo(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?))
        {
            // verify the required parameter 'fromAssetId' is set
            if (fromAssetId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'fromAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");
            }

            // verify the required parameter 'toAssetId' is set
            if (toAssetId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'toAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");
            }

            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromAssetId", CryptoAPIs.Client.ClientUtils.ParameterToString(fromAssetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetId", CryptoAPIs.Client.ClientUtils.ParameterToString(toAssetId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (calculationTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "calculationTimestamp", calculationTimestamp));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExchangeRateByAssetsIDsR>("/market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetsIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetsIDsR</returns>
        public async System.Threading.Tasks.Task<GetExchangeRateByAssetsIDsR> GetExchangeRateByAssetsIDsAsync(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetsIDsR> localVarResponse = await GetExchangeRateByAssetsIDsWithHttpInfoAsync(fromAssetId, toAssetId, context, calculationTimestamp, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="CryptoAPIs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="calculationTimestamp">Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetsIDsR)</returns>
        public async System.Threading.Tasks.Task<CryptoAPIs.Client.ApiResponse<GetExchangeRateByAssetsIDsR>> GetExchangeRateByAssetsIDsWithHttpInfoAsync(string fromAssetId, string toAssetId, string context = default(string), int? calculationTimestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromAssetId' is set
            if (fromAssetId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'fromAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");
            }

            // verify the required parameter 'toAssetId' is set
            if (toAssetId == null)
            {
                throw new CryptoAPIs.Client.ApiException(400, "Missing required parameter 'toAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");
            }


            CryptoAPIs.Client.RequestOptions localVarRequestOptions = new CryptoAPIs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CryptoAPIs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CryptoAPIs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromAssetId", CryptoAPIs.Client.ClientUtils.ParameterToString(fromAssetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetId", CryptoAPIs.Client.ClientUtils.ParameterToString(toAssetId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }
            if (calculationTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(CryptoAPIs.Client.ClientUtils.ParameterToMultiMap("", "calculationTimestamp", calculationTimestamp));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExchangeRateByAssetsIDsR>("/market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetsIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
