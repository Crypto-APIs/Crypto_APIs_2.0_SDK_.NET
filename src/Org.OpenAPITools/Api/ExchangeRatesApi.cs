/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetExchangeRateByAssetSymbolsResponse</returns>
        GetExchangeRateByAssetSymbolsResponse GetExchangeRateByAssetSymbols(string fromAssetSymbol, string toAssetSymbol, string context = default(string));

        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetSymbolsResponse</returns>
        ApiResponse<GetExchangeRateByAssetSymbolsResponse> GetExchangeRateByAssetSymbolsWithHttpInfo(string fromAssetSymbol, string toAssetSymbol, string context = default(string));
        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetExchangeRateByAssetsIDsResponse</returns>
        GetExchangeRateByAssetsIDsResponse GetExchangeRateByAssetsIDs(string fromAssetId, string toAssetId, string context = default(string));

        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetsIDsResponse</returns>
        ApiResponse<GetExchangeRateByAssetsIDsResponse> GetExchangeRateByAssetsIDsWithHttpInfo(string fromAssetId, string toAssetId, string context = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetSymbolsResponse</returns>
        System.Threading.Tasks.Task<GetExchangeRateByAssetSymbolsResponse> GetExchangeRateByAssetSymbolsAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Exchange Rate By Asset Symbols
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetSymbolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExchangeRateByAssetSymbolsResponse>> GetExchangeRateByAssetSymbolsWithHttpInfoAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetsIDsResponse</returns>
        System.Threading.Tasks.Task<GetExchangeRateByAssetsIDsResponse> GetExchangeRateByAssetsIDsAsync(string fromAssetId, string toAssetId, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Exchange Rate By Assets IDs
        /// </summary>
        /// <remarks>
        /// Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetsIDsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExchangeRateByAssetsIDsResponse>> GetExchangeRateByAssetsIDsWithHttpInfoAsync(string fromAssetId, string toAssetId, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeRatesApi : IExchangeRatesApiSync, IExchangeRatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeRatesApi : IExchangeRatesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeRatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeRatesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeRatesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExchangeRatesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetExchangeRateByAssetSymbolsResponse</returns>
        public GetExchangeRateByAssetSymbolsResponse GetExchangeRateByAssetSymbols(string fromAssetSymbol, string toAssetSymbol, string context = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetSymbolsResponse> localVarResponse = GetExchangeRateByAssetSymbolsWithHttpInfo(fromAssetSymbol, toAssetSymbol, context);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetSymbolsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetSymbolsResponse> GetExchangeRateByAssetSymbolsWithHttpInfo(string fromAssetSymbol, string toAssetSymbol, string context = default(string))
        {
            // verify the required parameter 'fromAssetSymbol' is set
            if (fromAssetSymbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");

            // verify the required parameter 'toAssetSymbol' is set
            if (toAssetSymbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fromAssetSymbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAssetSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetSymbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(toAssetSymbol)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExchangeRateByAssetSymbolsResponse>("/market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetSymbols", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetSymbolsResponse</returns>
        public async System.Threading.Tasks.Task<GetExchangeRateByAssetSymbolsResponse> GetExchangeRateByAssetSymbolsAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetSymbolsResponse> localVarResponse = await GetExchangeRateByAssetSymbolsWithHttpInfoAsync(fromAssetSymbol, toAssetSymbol, context, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Asset Symbols Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetSymbol">Defines the base asset symbol to get a rate for.</param>
        /// <param name="toAssetSymbol">Defines the relation asset symbol in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetSymbolsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetSymbolsResponse>> GetExchangeRateByAssetSymbolsWithHttpInfoAsync(string fromAssetSymbol, string toAssetSymbol, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromAssetSymbol' is set
            if (fromAssetSymbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");

            // verify the required parameter 'toAssetSymbol' is set
            if (toAssetSymbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toAssetSymbol' when calling ExchangeRatesApi->GetExchangeRateByAssetSymbols");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fromAssetSymbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAssetSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetSymbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(toAssetSymbol)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExchangeRateByAssetSymbolsResponse>("/market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetSymbols", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetExchangeRateByAssetsIDsResponse</returns>
        public GetExchangeRateByAssetsIDsResponse GetExchangeRateByAssetsIDs(string fromAssetId, string toAssetId, string context = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetsIDsResponse> localVarResponse = GetExchangeRateByAssetsIDsWithHttpInfo(fromAssetId, toAssetId, context);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetExchangeRateByAssetsIDsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetsIDsResponse> GetExchangeRateByAssetsIDsWithHttpInfo(string fromAssetId, string toAssetId, string context = default(string))
        {
            // verify the required parameter 'fromAssetId' is set
            if (fromAssetId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");

            // verify the required parameter 'toAssetId' is set
            if (toAssetId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fromAssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAssetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(toAssetId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExchangeRateByAssetsIDsResponse>("/market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetsIDs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExchangeRateByAssetsIDsResponse</returns>
        public async System.Threading.Tasks.Task<GetExchangeRateByAssetsIDsResponse> GetExchangeRateByAssetsIDsAsync(string fromAssetId, string toAssetId, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetsIDsResponse> localVarResponse = await GetExchangeRateByAssetsIDsWithHttpInfoAsync(fromAssetId, toAssetId, context, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Rate By Assets IDs Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromAssetId">Defines the base asset Reference ID to get a rate for.</param>
        /// <param name="toAssetId">Defines the relation asset Reference ID in which the base asset rate will be displayed.</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExchangeRateByAssetsIDsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetExchangeRateByAssetsIDsResponse>> GetExchangeRateByAssetsIDsWithHttpInfoAsync(string fromAssetId, string toAssetId, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromAssetId' is set
            if (fromAssetId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");

            // verify the required parameter 'toAssetId' is set
            if (toAssetId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toAssetId' when calling ExchangeRatesApi->GetExchangeRateByAssetsIDs");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fromAssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAssetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toAssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(toAssetId)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExchangeRateByAssetsIDsResponse>("/market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRateByAssetsIDs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
