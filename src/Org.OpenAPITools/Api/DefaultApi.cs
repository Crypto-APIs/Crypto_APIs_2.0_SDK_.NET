/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Contract Details by Address
        /// </summary>
        /// <remarks>
        /// This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetContractDetailsByAddressResponse</returns>
        GetContractDetailsByAddressResponse GetContractDetailsByAddress(string blockchain, string network, string contractAddress, string context = default(string));

        /// <summary>
        /// Get Contract Details by Address
        /// </summary>
        /// <remarks>
        /// This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetContractDetailsByAddressResponse</returns>
        ApiResponse<GetContractDetailsByAddressResponse> GetContractDetailsByAddressWithHttpInfo(string blockchain, string network, string contractAddress, string context = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Contract Details by Address
        /// </summary>
        /// <remarks>
        /// This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractDetailsByAddressResponse</returns>
        System.Threading.Tasks.Task<GetContractDetailsByAddressResponse> GetContractDetailsByAddressAsync(string blockchain, string network, string contractAddress, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Contract Details by Address
        /// </summary>
        /// <remarks>
        /// This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractDetailsByAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContractDetailsByAddressResponse>> GetContractDetailsByAddressWithHttpInfoAsync(string blockchain, string network, string contractAddress, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Contract Details by Address This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>GetContractDetailsByAddressResponse</returns>
        public GetContractDetailsByAddressResponse GetContractDetailsByAddress(string blockchain, string network, string contractAddress, string context = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<GetContractDetailsByAddressResponse> localVarResponse = GetContractDetailsByAddressWithHttpInfo(blockchain, network, contractAddress, context);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Details by Address This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <returns>ApiResponse of GetContractDetailsByAddressResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetContractDetailsByAddressResponse> GetContractDetailsByAddressWithHttpInfo(string blockchain, string network, string contractAddress, string context = default(string))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'blockchain' when calling DefaultApi->GetContractDetailsByAddress");

            // verify the required parameter 'network' is set
            if (network == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'network' when calling DefaultApi->GetContractDetailsByAddress");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling DefaultApi->GetContractDetailsByAddress");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("blockchain", Org.OpenAPITools.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", Org.OpenAPITools.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContractDetailsByAddressResponse>("/blockchain-data/{blockchain}/{network}/addresses/{contractAddress}/contract", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractDetailsByAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Contract Details by Address This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractDetailsByAddressResponse</returns>
        public async System.Threading.Tasks.Task<GetContractDetailsByAddressResponse> GetContractDetailsByAddressAsync(string blockchain, string network, string contractAddress, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetContractDetailsByAddressResponse> localVarResponse = await GetContractDetailsByAddressWithHttpInfoAsync(blockchain, network, contractAddress, context, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Details by Address This endpoint will return a smart contract details by address, this address is the address of the smart contract. It&#39;s not the same as the smart contract creator address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockchain"></param>
        /// <param name="network"></param>
        /// <param name="contractAddress">String identifier of the token</param>
        /// <param name="context">In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractDetailsByAddressResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetContractDetailsByAddressResponse>> GetContractDetailsByAddressWithHttpInfoAsync(string blockchain, string network, string contractAddress, string context = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockchain' is set
            if (blockchain == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'blockchain' when calling DefaultApi->GetContractDetailsByAddress");

            // verify the required parameter 'network' is set
            if (network == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'network' when calling DefaultApi->GetContractDetailsByAddress");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling DefaultApi->GetContractDetailsByAddress");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("blockchain", Org.OpenAPITools.Client.ClientUtils.ParameterToString(blockchain)); // path parameter
            localVarRequestOptions.PathParameters.Add("network", Org.OpenAPITools.Client.ClientUtils.ParameterToString(network)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            if (context != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContractDetailsByAddressResponse>("/blockchain-data/{blockchain}/{network}/addresses/{contractAddress}/contract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractDetailsByAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
