/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies the latest price of the asset.
    /// </summary>
    [DataContract(Name = "ListAssetsDetailsResponseItem_latestRate")]
    public partial class ListAssetsDetailsResponseItemLatestRate : IEquatable<ListAssetsDetailsResponseItemLatestRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsResponseItemLatestRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListAssetsDetailsResponseItemLatestRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsResponseItemLatestRate" /> class.
        /// </summary>
        /// <param name="amount">Specifies the amount of the latest price of the asset. (required).</param>
        /// <param name="calculationTimestamp">Defines when the price was calculated in UNIX timestamp..</param>
        /// <param name="unit">Specifies the unit of the latest price of the asset. (required).</param>
        public ListAssetsDetailsResponseItemLatestRate(string amount = default(string), int calculationTimestamp = default(int), string unit = default(string))
        {
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for ListAssetsDetailsResponseItemLatestRate and cannot be null");
            // to ensure "unit" is required (not null)
            this.Unit = unit ?? throw new ArgumentNullException("unit is a required property for ListAssetsDetailsResponseItemLatestRate and cannot be null");
            this.CalculationTimestamp = calculationTimestamp;
        }

        /// <summary>
        /// Specifies the amount of the latest price of the asset.
        /// </summary>
        /// <value>Specifies the amount of the latest price of the asset.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Defines when the price was calculated in UNIX timestamp.
        /// </summary>
        /// <value>Defines when the price was calculated in UNIX timestamp.</value>
        [DataMember(Name = "calculationTimestamp", EmitDefaultValue = false)]
        public int CalculationTimestamp { get; set; }

        /// <summary>
        /// Specifies the unit of the latest price of the asset.
        /// </summary>
        /// <value>Specifies the unit of the latest price of the asset.</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListAssetsDetailsResponseItemLatestRate {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CalculationTimestamp: ").Append(CalculationTimestamp).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListAssetsDetailsResponseItemLatestRate);
        }

        /// <summary>
        /// Returns true if ListAssetsDetailsResponseItemLatestRate instances are equal
        /// </summary>
        /// <param name="input">Instance of ListAssetsDetailsResponseItemLatestRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListAssetsDetailsResponseItemLatestRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CalculationTimestamp == input.CalculationTimestamp ||
                    this.CalculationTimestamp.Equals(input.CalculationTimestamp)
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.CalculationTimestamp.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
