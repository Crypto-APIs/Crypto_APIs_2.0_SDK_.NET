/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ListAssetsDetailsResponseItem
    /// </summary>
    [DataContract(Name = "ListAssetsDetailsResponseItem")]
    public partial class ListAssetsDetailsResponseItem : IEquatable<ListAssetsDetailsResponseItem>, IValidatableObject
    {
        /// <summary>
        /// Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.
        /// </summary>
        /// <value>Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetTypeEnum
        {
            /// <summary>
            /// Enum Fiat for value: fiat
            /// </summary>
            [EnumMember(Value = "fiat")]
            Fiat = 1,

            /// <summary>
            /// Enum Crypto for value: crypto
            /// </summary>
            [EnumMember(Value = "crypto")]
            Crypto = 2

        }


        /// <summary>
        /// Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.
        /// </summary>
        /// <value>Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.</value>
        [DataMember(Name = "assetType", IsRequired = true, EmitDefaultValue = false)]
        public AssetTypeEnum AssetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsResponseItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListAssetsDetailsResponseItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAssetsDetailsResponseItem" /> class.
        /// </summary>
        /// <param name="assetId">Defines the unique ID of the specific asset. (required).</param>
        /// <param name="assetLogo">assetLogo (required).</param>
        /// <param name="assetName">Specifies the name of the asset in question. (required).</param>
        /// <param name="assetOriginalSymbol">Specifies the asset&#39;s original symbol as introduced by its founders. (required).</param>
        /// <param name="assetSymbol">Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required).</param>
        /// <param name="assetType">Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;. (required).</param>
        /// <param name="latestRate">latestRate (required).</param>
        /// <param name="specificData">specificData (required).</param>
        public ListAssetsDetailsResponseItem(string assetId = default(string), ListAssetsDetailsResponseItemAssetLogo assetLogo = default(ListAssetsDetailsResponseItemAssetLogo), string assetName = default(string), string assetOriginalSymbol = default(string), string assetSymbol = default(string), AssetTypeEnum assetType = default(AssetTypeEnum), ListAssetsDetailsResponseItemLatestRate latestRate = default(ListAssetsDetailsResponseItemLatestRate), ListAssetsDetailsResponseItemSpecificData specificData = default(ListAssetsDetailsResponseItemSpecificData))
        {
            // to ensure "assetId" is required (not null)
            this.AssetId = assetId ?? throw new ArgumentNullException("assetId is a required property for ListAssetsDetailsResponseItem and cannot be null");
            // to ensure "assetLogo" is required (not null)
            this.AssetLogo = assetLogo ?? throw new ArgumentNullException("assetLogo is a required property for ListAssetsDetailsResponseItem and cannot be null");
            // to ensure "assetName" is required (not null)
            this.AssetName = assetName ?? throw new ArgumentNullException("assetName is a required property for ListAssetsDetailsResponseItem and cannot be null");
            // to ensure "assetOriginalSymbol" is required (not null)
            this.AssetOriginalSymbol = assetOriginalSymbol ?? throw new ArgumentNullException("assetOriginalSymbol is a required property for ListAssetsDetailsResponseItem and cannot be null");
            // to ensure "assetSymbol" is required (not null)
            this.AssetSymbol = assetSymbol ?? throw new ArgumentNullException("assetSymbol is a required property for ListAssetsDetailsResponseItem and cannot be null");
            this.AssetType = assetType;
            // to ensure "latestRate" is required (not null)
            this.LatestRate = latestRate ?? throw new ArgumentNullException("latestRate is a required property for ListAssetsDetailsResponseItem and cannot be null");
            // to ensure "specificData" is required (not null)
            this.SpecificData = specificData ?? throw new ArgumentNullException("specificData is a required property for ListAssetsDetailsResponseItem and cannot be null");
        }

        /// <summary>
        /// Defines the unique ID of the specific asset.
        /// </summary>
        /// <value>Defines the unique ID of the specific asset.</value>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets AssetLogo
        /// </summary>
        [DataMember(Name = "assetLogo", IsRequired = true, EmitDefaultValue = false)]
        public ListAssetsDetailsResponseItemAssetLogo AssetLogo { get; set; }

        /// <summary>
        /// Specifies the name of the asset in question.
        /// </summary>
        /// <value>Specifies the name of the asset in question.</value>
        [DataMember(Name = "assetName", IsRequired = true, EmitDefaultValue = false)]
        public string AssetName { get; set; }

        /// <summary>
        /// Specifies the asset&#39;s original symbol as introduced by its founders.
        /// </summary>
        /// <value>Specifies the asset&#39;s original symbol as introduced by its founders.</value>
        [DataMember(Name = "assetOriginalSymbol", IsRequired = true, EmitDefaultValue = false)]
        public string AssetOriginalSymbol { get; set; }

        /// <summary>
        /// Specifies the asset&#39;s unique symbol in the Crypto APIs listings.
        /// </summary>
        /// <value>Specifies the asset&#39;s unique symbol in the Crypto APIs listings.</value>
        [DataMember(Name = "assetSymbol", IsRequired = true, EmitDefaultValue = false)]
        public string AssetSymbol { get; set; }

        /// <summary>
        /// Gets or Sets LatestRate
        /// </summary>
        [DataMember(Name = "latestRate", IsRequired = true, EmitDefaultValue = false)]
        public ListAssetsDetailsResponseItemLatestRate LatestRate { get; set; }

        /// <summary>
        /// Gets or Sets SpecificData
        /// </summary>
        [DataMember(Name = "specificData", IsRequired = true, EmitDefaultValue = false)]
        public ListAssetsDetailsResponseItemSpecificData SpecificData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListAssetsDetailsResponseItem {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetLogo: ").Append(AssetLogo).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetOriginalSymbol: ").Append(AssetOriginalSymbol).Append("\n");
            sb.Append("  AssetSymbol: ").Append(AssetSymbol).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  LatestRate: ").Append(LatestRate).Append("\n");
            sb.Append("  SpecificData: ").Append(SpecificData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListAssetsDetailsResponseItem);
        }

        /// <summary>
        /// Returns true if ListAssetsDetailsResponseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ListAssetsDetailsResponseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListAssetsDetailsResponseItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.AssetLogo == input.AssetLogo ||
                    (this.AssetLogo != null &&
                    this.AssetLogo.Equals(input.AssetLogo))
                ) && 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.AssetOriginalSymbol == input.AssetOriginalSymbol ||
                    (this.AssetOriginalSymbol != null &&
                    this.AssetOriginalSymbol.Equals(input.AssetOriginalSymbol))
                ) && 
                (
                    this.AssetSymbol == input.AssetSymbol ||
                    (this.AssetSymbol != null &&
                    this.AssetSymbol.Equals(input.AssetSymbol))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    this.AssetType.Equals(input.AssetType)
                ) && 
                (
                    this.LatestRate == input.LatestRate ||
                    (this.LatestRate != null &&
                    this.LatestRate.Equals(input.LatestRate))
                ) && 
                (
                    this.SpecificData == input.SpecificData ||
                    (this.SpecificData != null &&
                    this.SpecificData.Equals(input.SpecificData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.AssetLogo != null)
                    hashCode = hashCode * 59 + this.AssetLogo.GetHashCode();
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                if (this.AssetOriginalSymbol != null)
                    hashCode = hashCode * 59 + this.AssetOriginalSymbol.GetHashCode();
                if (this.AssetSymbol != null)
                    hashCode = hashCode * 59 + this.AssetSymbol.GetHashCode();
                hashCode = hashCode * 59 + this.AssetType.GetHashCode();
                if (this.LatestRate != null)
                    hashCode = hashCode * 59 + this.LatestRate.GetHashCode();
                if (this.SpecificData != null)
                    hashCode = hashCode * 59 + this.SpecificData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
