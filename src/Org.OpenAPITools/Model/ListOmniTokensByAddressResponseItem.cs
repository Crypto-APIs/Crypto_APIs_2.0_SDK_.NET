/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ListOmniTokensByAddressResponseItem
    /// </summary>
    [DataContract(Name = "ListOmniTokensByAddressResponseItem")]
    public partial class ListOmniTokensByAddressResponseItem : IEquatable<ListOmniTokensByAddressResponseItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOmniTokensByAddressResponseItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListOmniTokensByAddressResponseItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOmniTokensByAddressResponseItem" /> class.
        /// </summary>
        /// <param name="balance">Defines the balance of the Omni tokens to send in the address. (required).</param>
        /// <param name="frozen">Defines the amount frozen by the issuer (applies to managed properties only). (required).</param>
        /// <param name="name">Defines the name of the Omni tokens to send. (required).</param>
        /// <param name="propertyId">Represents the identifier of the tokens to send. (required).</param>
        /// <param name="reserved">Represents the amount reserved by sell offers and accepts. (required).</param>
        public ListOmniTokensByAddressResponseItem(string balance = default(string), string frozen = default(string), string name = default(string), int propertyId = default(int), string reserved = default(string))
        {
            // to ensure "balance" is required (not null)
            this.Balance = balance ?? throw new ArgumentNullException("balance is a required property for ListOmniTokensByAddressResponseItem and cannot be null");
            // to ensure "frozen" is required (not null)
            this.Frozen = frozen ?? throw new ArgumentNullException("frozen is a required property for ListOmniTokensByAddressResponseItem and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ListOmniTokensByAddressResponseItem and cannot be null");
            this.PropertyId = propertyId;
            // to ensure "reserved" is required (not null)
            this.Reserved = reserved ?? throw new ArgumentNullException("reserved is a required property for ListOmniTokensByAddressResponseItem and cannot be null");
        }

        /// <summary>
        /// Defines the balance of the Omni tokens to send in the address.
        /// </summary>
        /// <value>Defines the balance of the Omni tokens to send in the address.</value>
        [DataMember(Name = "balance", IsRequired = true, EmitDefaultValue = false)]
        public string Balance { get; set; }

        /// <summary>
        /// Defines the amount frozen by the issuer (applies to managed properties only).
        /// </summary>
        /// <value>Defines the amount frozen by the issuer (applies to managed properties only).</value>
        [DataMember(Name = "frozen", IsRequired = true, EmitDefaultValue = false)]
        public string Frozen { get; set; }

        /// <summary>
        /// Defines the name of the Omni tokens to send.
        /// </summary>
        /// <value>Defines the name of the Omni tokens to send.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Represents the identifier of the tokens to send.
        /// </summary>
        /// <value>Represents the identifier of the tokens to send.</value>
        [DataMember(Name = "propertyId", IsRequired = true, EmitDefaultValue = false)]
        public int PropertyId { get; set; }

        /// <summary>
        /// Represents the amount reserved by sell offers and accepts.
        /// </summary>
        /// <value>Represents the amount reserved by sell offers and accepts.</value>
        [DataMember(Name = "reserved", IsRequired = true, EmitDefaultValue = false)]
        public string Reserved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListOmniTokensByAddressResponseItem {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Frozen: ").Append(Frozen).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListOmniTokensByAddressResponseItem);
        }

        /// <summary>
        /// Returns true if ListOmniTokensByAddressResponseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ListOmniTokensByAddressResponseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListOmniTokensByAddressResponseItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Frozen == input.Frozen ||
                    (this.Frozen != null &&
                    this.Frozen.Equals(input.Frozen))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    this.PropertyId.Equals(input.PropertyId)
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    (this.Reserved != null &&
                    this.Reserved.Equals(input.Reserved))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Frozen != null)
                    hashCode = hashCode * 59 + this.Frozen.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.Reserved != null)
                    hashCode = hashCode * 59 + this.Reserved.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
