/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CryptoAPIs.Client;
using CryptoAPIs.Api;
// uncomment below to import models
//using CryptoAPIs.Model;

namespace CryptoAPIs.Test.Api
{
    /// <summary>
    ///  Class for testing ManageSubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ManageSubscriptionsApiTests : IDisposable
    {
        private ManageSubscriptionsApi instance;

        public ManageSubscriptionsApiTests()
        {
            instance = new ManageSubscriptionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManageSubscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ManageSubscriptionsApi
            //Assert.IsType<ManageSubscriptionsApi>(instance);
        }

        /// <summary>
        /// Test ActivateBlockchainEventSubscription
        /// </summary>
        [Fact]
        public void ActivateBlockchainEventSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string referenceId = null;
            //string context = null;
            //ActivateBlockchainEventSubscriptionRB activateBlockchainEventSubscriptionRB = null;
            //var response = instance.ActivateBlockchainEventSubscription(referenceId, context, activateBlockchainEventSubscriptionRB);
            //Assert.IsType<ActivateBlockchainEventSubscriptionR>(response);
        }

        /// <summary>
        /// Test DeleteBlockchainEventSubscription
        /// </summary>
        [Fact]
        public void DeleteBlockchainEventSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string referenceId = null;
            //string context = null;
            //var response = instance.DeleteBlockchainEventSubscription(blockchain, network, referenceId, context);
            //Assert.IsType<DeleteBlockchainEventSubscriptionR>(response);
        }

        /// <summary>
        /// Test GetBlockchainEventSubscriptionDetailsByReferenceID
        /// </summary>
        [Fact]
        public void GetBlockchainEventSubscriptionDetailsByReferenceIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string referenceId = null;
            //string context = null;
            //var response = instance.GetBlockchainEventSubscriptionDetailsByReferenceID(referenceId, context);
            //Assert.IsType<GetBlockchainEventSubscriptionDetailsByReferenceIDR>(response);
        }

        /// <summary>
        /// Test ListBlockchainEventsSubscriptions
        /// </summary>
        [Fact]
        public void ListBlockchainEventsSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListBlockchainEventsSubscriptions(blockchain, network, context, limit, offset);
            //Assert.IsType<ListBlockchainEventsSubscriptionsR>(response);
        }
    }
}
