/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CryptoAPIs.Client;
using CryptoAPIs.Api;
// uncomment below to import models
//using CryptoAPIs.Model;

namespace CryptoAPIs.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionsApiTests : IDisposable
    {
        private TransactionsApi instance;

        public TransactionsApiTests()
        {
            instance = new TransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransactionsApi
            //Assert.IsType<TransactionsApi>(instance);
        }

        /// <summary>
        /// Test CreateCoinsTransactionRequestFromAddress
        /// </summary>
        [Fact]
        public void CreateCoinsTransactionRequestFromAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = null;
            //var response = instance.CreateCoinsTransactionRequestFromAddress(address, blockchain, network, walletId, context, createCoinsTransactionRequestFromAddressRB);
            //Assert.IsType<CreateCoinsTransactionRequestFromAddressR>(response);
        }

        /// <summary>
        /// Test CreateCoinsTransactionRequestFromWallet
        /// </summary>
        [Fact]
        public void CreateCoinsTransactionRequestFromWalletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = null;
            //var response = instance.CreateCoinsTransactionRequestFromWallet(blockchain, network, walletId, context, createCoinsTransactionRequestFromWalletRB);
            //Assert.IsType<CreateCoinsTransactionRequestFromWalletR>(response);
        }

        /// <summary>
        /// Test CreateTokensTransactionRequestFromAddress
        /// </summary>
        [Fact]
        public void CreateTokensTransactionRequestFromAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //CreateTokensTransactionRequestFromAddressRB createTokensTransactionRequestFromAddressRB = null;
            //var response = instance.CreateTokensTransactionRequestFromAddress(address, blockchain, network, walletId, context, createTokensTransactionRequestFromAddressRB);
            //Assert.IsType<CreateTokensTransactionRequestFromAddressR>(response);
        }
    }
}
