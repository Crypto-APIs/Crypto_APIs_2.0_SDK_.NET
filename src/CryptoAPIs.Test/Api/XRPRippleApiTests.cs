/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CryptoAPIs.Client;
using CryptoAPIs.Api;
// uncomment below to import models
//using CryptoAPIs.Model;

namespace CryptoAPIs.Test.Api
{
    /// <summary>
    ///  Class for testing XRPRippleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class XRPRippleApiTests : IDisposable
    {
        private XRPRippleApi instance;

        public XRPRippleApiTests()
        {
            instance = new XRPRippleApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of XRPRippleApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' XRPRippleApi
            //Assert.IsType<XRPRippleApi>(instance);
        }

        /// <summary>
        /// Test GetLatestMinedXRPRippleBlock
        /// </summary>
        [Fact]
        public void GetLatestMinedXRPRippleBlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string context = null;
            //var response = instance.GetLatestMinedXRPRippleBlock(network, context);
            //Assert.IsType<GetLatestMinedXRPRippleBlockR>(response);
        }

        /// <summary>
        /// Test GetXRPRippleAddressDetails
        /// </summary>
        [Fact]
        public void GetXRPRippleAddressDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string address = null;
            //string context = null;
            //var response = instance.GetXRPRippleAddressDetails(network, address, context);
            //Assert.IsType<GetXRPRippleAddressDetailsR>(response);
        }

        /// <summary>
        /// Test GetXRPRippleBlockDetailsByBlockHash
        /// </summary>
        [Fact]
        public void GetXRPRippleBlockDetailsByBlockHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string blockHash = null;
            //string context = null;
            //var response = instance.GetXRPRippleBlockDetailsByBlockHash(network, blockHash, context);
            //Assert.IsType<GetXRPRippleBlockDetailsByBlockHashR>(response);
        }

        /// <summary>
        /// Test GetXRPRippleBlockDetailsByBlockHeight
        /// </summary>
        [Fact]
        public void GetXRPRippleBlockDetailsByBlockHeightTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string blockHeight = null;
            //string context = null;
            //var response = instance.GetXRPRippleBlockDetailsByBlockHeight(network, blockHeight, context);
            //Assert.IsType<GetXRPRippleBlockDetailsByBlockHeightR>(response);
        }

        /// <summary>
        /// Test GetXRPRippleTransactionDetailsByTransactionID
        /// </summary>
        [Fact]
        public void GetXRPRippleTransactionDetailsByTransactionIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string transactionHash = null;
            //string context = null;
            //var response = instance.GetXRPRippleTransactionDetailsByTransactionID(network, transactionHash, context);
            //Assert.IsType<GetXRPRippleTransactionDetailsByTransactionIDR>(response);
        }

        /// <summary>
        /// Test ListXRPRippleTransactionsByAddress
        /// </summary>
        [Fact]
        public void ListXRPRippleTransactionsByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string address = null;
            //string context = null;
            //long? limit = null;
            //long? offset = null;
            //string transactionType = null;
            //var response = instance.ListXRPRippleTransactionsByAddress(network, address, context, limit, offset, transactionType);
            //Assert.IsType<ListXRPRippleTransactionsByAddressR>(response);
        }

        /// <summary>
        /// Test ListXRPRippleTransactionsByAddressAndTimeRange
        /// </summary>
        [Fact]
        public void ListXRPRippleTransactionsByAddressAndTimeRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string address = null;
            //int fromTimestamp = null;
            //int toTimestamp = null;
            //string context = null;
            //long? limit = null;
            //long? offset = null;
            //string transactionType = null;
            //var response = instance.ListXRPRippleTransactionsByAddressAndTimeRange(network, address, fromTimestamp, toTimestamp, context, limit, offset, transactionType);
            //Assert.IsType<ListXRPRippleTransactionsByAddressAndTimeRangeR>(response);
        }

        /// <summary>
        /// Test ListXRPRippleTransactionsByBlockHash
        /// </summary>
        [Fact]
        public void ListXRPRippleTransactionsByBlockHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //string blockHash = null;
            //string context = null;
            //long? limit = null;
            //long? offset = null;
            //var response = instance.ListXRPRippleTransactionsByBlockHash(network, blockHash, context, limit, offset);
            //Assert.IsType<ListXRPRippleTransactionsByBlockHashR>(response);
        }

        /// <summary>
        /// Test ListXRPRippleTransactionsByBlockHeight
        /// </summary>
        [Fact]
        public void ListXRPRippleTransactionsByBlockHeightTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string network = null;
            //long blockHeight = null;
            //string context = null;
            //long? limit = null;
            //long? offset = null;
            //var response = instance.ListXRPRippleTransactionsByBlockHeight(network, blockHeight, context, limit, offset);
            //Assert.IsType<ListXRPRippleTransactionsByBlockHeightR>(response);
        }
    }
}
