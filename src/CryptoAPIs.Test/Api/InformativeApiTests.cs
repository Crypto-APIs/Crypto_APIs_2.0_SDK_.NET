/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CryptoAPIs.Client;
using CryptoAPIs.Api;
// uncomment below to import models
//using CryptoAPIs.Model;

namespace CryptoAPIs.Test.Api
{
    /// <summary>
    ///  Class for testing InformativeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InformativeApiTests : IDisposable
    {
        private InformativeApi instance;

        public InformativeApiTests()
        {
            instance = new InformativeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InformativeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InformativeApi
            //Assert.IsType<InformativeApi>(instance);
        }

        /// <summary>
        /// Test GetTransactionRequestDetails
        /// </summary>
        [Fact]
        public void GetTransactionRequestDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionRequestId = null;
            //string context = null;
            //var response = instance.GetTransactionRequestDetails(transactionRequestId, context);
            //Assert.IsType<GetTransactionRequestDetailsR>(response);
        }

        /// <summary>
        /// Test GetWalletAssetDetails
        /// </summary>
        [Fact]
        public void GetWalletAssetDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //var response = instance.GetWalletAssetDetails(blockchain, network, walletId, context);
            //Assert.IsType<GetWalletAssetDetailsR>(response);
        }

        /// <summary>
        /// Test GetWalletTransactionDetailsByTransactionID
        /// </summary>
        [Fact]
        public void GetWalletTransactionDetailsByTransactionIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string transactionId = null;
            //string context = null;
            //var response = instance.GetWalletTransactionDetailsByTransactionID(blockchain, network, transactionId, context);
            //Assert.IsType<GetWalletTransactionDetailsByTransactionIDR>(response);
        }

        /// <summary>
        /// Test ListAllAssetsByWalletID
        /// </summary>
        [Fact]
        public void ListAllAssetsByWalletIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletId = null;
            //string context = null;
            //var response = instance.ListAllAssetsByWalletID(walletId, context);
            //Assert.IsType<ListAllAssetsByWalletIDR>(response);
        }

        /// <summary>
        /// Test ListAllAssetsFromAllWallets
        /// </summary>
        [Fact]
        public void ListAllAssetsFromAllWalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListAllAssetsFromAllWallets(context, limit, offset);
            //Assert.IsType<ListAllAssetsFromAllWalletsR>(response);
        }

        /// <summary>
        /// Test ListDepositAddresses
        /// </summary>
        [Fact]
        public void ListDepositAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //var response = instance.ListDepositAddresses(blockchain, network, walletId, context);
            //Assert.IsType<ListDepositAddressesR>(response);
        }

        /// <summary>
        /// Test ListSupportedTokens
        /// </summary>
        [Fact]
        public void ListSupportedTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListSupportedTokens(blockchain, network, context, limit, offset);
            //Assert.IsType<ListSupportedTokensR>(response);
        }

        /// <summary>
        /// Test ListWalletTransactions
        /// </summary>
        [Fact]
        public void ListWalletTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string walletId = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListWalletTransactions(blockchain, network, walletId, context, limit, offset);
            //Assert.IsType<ListWalletTransactionsR>(response);
        }
    }
}
