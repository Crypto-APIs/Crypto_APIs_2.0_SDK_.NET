/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using CryptoAPIs.Api;
using CryptoAPIs.Model;
using CryptoAPIs.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace CryptoAPIs.Test.Model
{
    /// <summary>
    ///  Class for testing ListAllAssetsFromAllWalletsRI
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ListAllAssetsFromAllWalletsRITests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ListAllAssetsFromAllWalletsRI
        //private ListAllAssetsFromAllWalletsRI instance;

        public ListAllAssetsFromAllWalletsRITests()
        {
            // TODO uncomment below to create an instance of ListAllAssetsFromAllWalletsRI
            //instance = new ListAllAssetsFromAllWalletsRI();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListAllAssetsFromAllWalletsRI
        /// </summary>
        [Fact]
        public void ListAllAssetsFromAllWalletsRIInstanceTest()
        {
            // TODO uncomment below to test "IsType" ListAllAssetsFromAllWalletsRI
            //Assert.IsType<ListAllAssetsFromAllWalletsRI>(instance);
        }


        /// <summary>
        /// Test the property 'Coins'
        /// </summary>
        [Fact]
        public void CoinsTest()
        {
            // TODO unit test for the property 'Coins'
        }
        /// <summary>
        /// Test the property 'FungibleTokens'
        /// </summary>
        [Fact]
        public void FungibleTokensTest()
        {
            // TODO unit test for the property 'FungibleTokens'
        }
        /// <summary>
        /// Test the property 'NonFungibleTokens'
        /// </summary>
        [Fact]
        public void NonFungibleTokensTest()
        {
            // TODO unit test for the property 'NonFungibleTokens'
        }
        /// <summary>
        /// Test the property 'WalletId'
        /// </summary>
        [Fact]
        public void WalletIdTest()
        {
            // TODO unit test for the property 'WalletId'
        }
        /// <summary>
        /// Test the property 'WalletName'
        /// </summary>
        [Fact]
        public void WalletNameTest()
        {
            // TODO unit test for the property 'WalletName'
        }

    }

}
