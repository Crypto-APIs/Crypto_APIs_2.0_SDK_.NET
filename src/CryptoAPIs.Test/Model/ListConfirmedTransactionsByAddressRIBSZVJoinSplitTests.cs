/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using CryptoAPIs.Api;
using CryptoAPIs.Model;
using CryptoAPIs.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace CryptoAPIs.Test.Model
{
    /// <summary>
    ///  Class for testing ListConfirmedTransactionsByAddressRIBSZVJoinSplit
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ListConfirmedTransactionsByAddressRIBSZVJoinSplitTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ListConfirmedTransactionsByAddressRIBSZVJoinSplit
        //private ListConfirmedTransactionsByAddressRIBSZVJoinSplit instance;

        public ListConfirmedTransactionsByAddressRIBSZVJoinSplitTests()
        {
            // TODO uncomment below to create an instance of ListConfirmedTransactionsByAddressRIBSZVJoinSplit
            //instance = new ListConfirmedTransactionsByAddressRIBSZVJoinSplit();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListConfirmedTransactionsByAddressRIBSZVJoinSplit
        /// </summary>
        [Fact]
        public void ListConfirmedTransactionsByAddressRIBSZVJoinSplitInstanceTest()
        {
            // TODO uncomment below to test "IsType" ListConfirmedTransactionsByAddressRIBSZVJoinSplit
            //Assert.IsType<ListConfirmedTransactionsByAddressRIBSZVJoinSplit>(instance);
        }


        /// <summary>
        /// Test the property 'Anchor'
        /// </summary>
        [Fact]
        public void AnchorTest()
        {
            // TODO unit test for the property 'Anchor'
        }
        /// <summary>
        /// Test the property 'CipherTexts'
        /// </summary>
        [Fact]
        public void CipherTextsTest()
        {
            // TODO unit test for the property 'CipherTexts'
        }
        /// <summary>
        /// Test the property 'Commitments'
        /// </summary>
        [Fact]
        public void CommitmentsTest()
        {
            // TODO unit test for the property 'Commitments'
        }
        /// <summary>
        /// Test the property 'Macs'
        /// </summary>
        [Fact]
        public void MacsTest()
        {
            // TODO unit test for the property 'Macs'
        }
        /// <summary>
        /// Test the property 'Nullifiers'
        /// </summary>
        [Fact]
        public void NullifiersTest()
        {
            // TODO unit test for the property 'Nullifiers'
        }
        /// <summary>
        /// Test the property 'OneTimePubKey'
        /// </summary>
        [Fact]
        public void OneTimePubKeyTest()
        {
            // TODO unit test for the property 'OneTimePubKey'
        }
        /// <summary>
        /// Test the property 'Proof'
        /// </summary>
        [Fact]
        public void ProofTest()
        {
            // TODO unit test for the property 'Proof'
        }
        /// <summary>
        /// Test the property 'RandomSeed'
        /// </summary>
        [Fact]
        public void RandomSeedTest()
        {
            // TODO unit test for the property 'RandomSeed'
        }
        /// <summary>
        /// Test the property 'VPubNew'
        /// </summary>
        [Fact]
        public void VPubNewTest()
        {
            // TODO unit test for the property 'VPubNew'
        }
        /// <summary>
        /// Test the property 'VPubOld'
        /// </summary>
        [Fact]
        public void VPubOldTest()
        {
            // TODO unit test for the property 'VPubOld'
        }

    }

}
