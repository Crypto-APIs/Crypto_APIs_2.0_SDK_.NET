/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TokensApiTests : IDisposable
    {
        private TokensApi instance;

        public TokensApiTests()
        {
            instance = new TokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TokensApi
            //Assert.IsType<TokensApi>(instance);
        }

        /// <summary>
        /// Test ListTokensByAddress
        /// </summary>
        [Fact]
        public void ListTokensByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string address = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListTokensByAddress(blockchain, network, address, context, limit, offset);
            //Assert.IsType<ListTokensByAddressResponse>(response);
        }

        /// <summary>
        /// Test ListTokensTransfersByAddress
        /// </summary>
        [Fact]
        public void ListTokensTransfersByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string address = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListTokensTransfersByAddress(blockchain, network, address, context, limit, offset);
            //Assert.IsType<ListTokensTransfersByAddressResponse>(response);
        }

        /// <summary>
        /// Test ListTokensTransfersByTransactionHash
        /// </summary>
        [Fact]
        public void ListTokensTransfersByTransactionHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockchain = null;
            //string network = null;
            //string transactionHash = null;
            //string context = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListTokensTransfersByTransactionHash(blockchain, network, transactionHash, context, limit, offset);
            //Assert.IsType<ListTokensTransfersByTransactionHashResponse>(response);
        }
    }
}
