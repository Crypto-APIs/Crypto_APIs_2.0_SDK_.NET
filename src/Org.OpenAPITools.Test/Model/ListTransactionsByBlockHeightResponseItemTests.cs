/*
 * Crypto APIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing ListTransactionsByBlockHeightResponseItem
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ListTransactionsByBlockHeightResponseItemTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ListTransactionsByBlockHeightResponseItem
        //private ListTransactionsByBlockHeightResponseItem instance;

        public ListTransactionsByBlockHeightResponseItemTests()
        {
            // TODO uncomment below to create an instance of ListTransactionsByBlockHeightResponseItem
            //instance = new ListTransactionsByBlockHeightResponseItem();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListTransactionsByBlockHeightResponseItem
        /// </summary>
        [Fact]
        public void ListTransactionsByBlockHeightResponseItemInstanceTest()
        {
            // TODO uncomment below to test "IsType" ListTransactionsByBlockHeightResponseItem
            //Assert.IsType<ListTransactionsByBlockHeightResponseItem>(instance);
        }


        /// <summary>
        /// Test the property 'Index'
        /// </summary>
        [Fact]
        public void IndexTest()
        {
            // TODO unit test for the property 'Index'
        }
        /// <summary>
        /// Test the property 'MinedInBlockHash'
        /// </summary>
        [Fact]
        public void MinedInBlockHashTest()
        {
            // TODO unit test for the property 'MinedInBlockHash'
        }
        /// <summary>
        /// Test the property 'MinedInBlockHeight'
        /// </summary>
        [Fact]
        public void MinedInBlockHeightTest()
        {
            // TODO unit test for the property 'MinedInBlockHeight'
        }
        /// <summary>
        /// Test the property 'Recipients'
        /// </summary>
        [Fact]
        public void RecipientsTest()
        {
            // TODO unit test for the property 'Recipients'
        }
        /// <summary>
        /// Test the property 'Senders'
        /// </summary>
        [Fact]
        public void SendersTest()
        {
            // TODO unit test for the property 'Senders'
        }
        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Fact]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }
        /// <summary>
        /// Test the property 'TransactionHash'
        /// </summary>
        [Fact]
        public void TransactionHashTest()
        {
            // TODO unit test for the property 'TransactionHash'
        }
        /// <summary>
        /// Test the property 'TransactionId'
        /// </summary>
        [Fact]
        public void TransactionIdTest()
        {
            // TODO unit test for the property 'TransactionId'
        }
        /// <summary>
        /// Test the property 'Fee'
        /// </summary>
        [Fact]
        public void FeeTest()
        {
            // TODO unit test for the property 'Fee'
        }
        /// <summary>
        /// Test the property 'BlockchainSpecific'
        /// </summary>
        [Fact]
        public void BlockchainSpecificTest()
        {
            // TODO unit test for the property 'BlockchainSpecific'
        }

    }

}
